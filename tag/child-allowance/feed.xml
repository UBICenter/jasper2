<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator>
  <link href="/tag/child-allowance/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2022-12-30T16:09:06+00:00</updated>
  <id>/tag/child-allowance/feed.xml</id>

  
  
  

  
    <title type="html">UBI Center | </title>
  

  
    <subtitle>Analyzing universal basic income policies with open-source research</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">How a child allowance would lift moms out of poverty</title>
      <link href="/us-mothers-day" rel="alternate" type="text/html" title="How a child allowance would lift moms out of poverty" />
      <published>2022-05-08T00:00:00+00:00</published>
      <updated>2022-05-08T00:00:00+00:00</updated>
      <id>/us-mothers-day</id>
      <content type="html" xml:base="/us-mothers-day">&lt;p&gt;52 million mothers in the United States live with their children.
Of those, over 4.5 million are in poverty.&lt;/p&gt;

&lt;p&gt;That poverty rate of 9.0 percent is a bit lower than the overall poverty rate of 9.3 percent,&lt;sup id=&quot;fnref:spm&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:spm&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; largely thanks to safety net programs that target families with children.
Yet, many of those programs fail to reach low-income mothers due to qualification rules and complex bureaucracies.
For example, &lt;a href=&quot;https://tcf.org/content/report/what-a-child-allowance-like-canadas-would-do-for-child-poverty-in-america/?session=1&quot;&gt;70 percent of single moms do not receive the full Child Tax Credit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simpler alternative, which &lt;a href=&quot;https://child-allowance.ubicenter.org/policies.html#other-countries&quot;&gt;other countries adopt&lt;/a&gt; and &lt;a href=&quot;https://www.ubicenter.org/tag/child-allowance/&quot;&gt;which we’ve written about in several other reports&lt;/a&gt;, is a universal child allowance: a flat amount given each month to parents for each of their children.&lt;/p&gt;

&lt;p&gt;While child allowances chiefly reduce child poverty, they also lift mothers out of poverty.
For example, a $200 per month child allowance would lift one million mothers out of poverty, at an annual cost of $173 billion.&lt;sup id=&quot;fnref:funding&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:funding&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#graph_graph_5_1&quot;).load(&quot;/assets/markdown_assets/us-mothers-day-2022/graph_5_1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;graph_graph_5_1&quot;&gt;&lt;/div&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#graph_graph_5_2&quot;).load(&quot;/assets/markdown_assets/us-mothers-day-2022/graph_5_2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;graph_graph_5_2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Child allowances would cut maternal poverty at similar relative rates across states.
For example, a $200 monthly child allowance would cut it by about 15 percent in both California and Maryland.
In California, the policy would cost $21 billion per year and lift 114,000 mothers out of poverty, while in Maryland, it would cost $3.1 billion per year and lift 16,000 mothers out of poverty.&lt;/p&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#graph_graph_7_1&quot;).load(&quot;/assets/markdown_assets/us-mothers-day-2022/graph_7_1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;graph_graph_7_1&quot;&gt;&lt;/div&gt;

&lt;p&gt;Maternal poverty is associated with &lt;a href=&quot;https://srcd.onlinelibrary.wiley.com/doi/abs/10.1111/1467-8624.00379&quot;&gt;depression and worsened child development&lt;/a&gt;.
Mothers spend about &lt;a href=&quot;https://www.bls.gov/charts/american-time-use/activity-by-parent.htm&quot;&gt;1.7 hours per day&lt;/a&gt; caring for children.
And of course, mothers suffer from the consequences of poverty like any other person does.
Child allowances can improve child outcomes, compensate parents for raising the next generation, and improve the well-being of moms everywhere.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:spm&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This analysis uses the 2020 Current Population Survey March Supplement, and the &lt;a href=&quot;https://www.census.gov/library/publications/2021/demo/p60-275.html&quot;&gt;Supplemental Poverty Measure&lt;/a&gt;. The official SPM poverty rate was 9.1 percent in 2020, but the public use microdata that powers our analysis produces slightly different results. &lt;a href=&quot;#fnref:spm&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:funding&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This static analysis assumes no funding and no behavioral responses. It uses the open source &lt;a href=&quot;https://openfisca.us&quot;&gt;OpenFisca US&lt;/a&gt; microsimulation model from &lt;a href=&quot;https://policyengine.org&quot;&gt;PolicyEngine&lt;/a&gt;. &lt;a href=&quot;#fnref:funding&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;max&quot;, &quot;nate&quot;]</name>
        
        
      </author>

      

      
        <category term="child allowance" />
      
        <category term="us" />
      

      
        <summary type="html">A $200 per month child allowance would lift a million mothers out of poverty.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Mapping the impact of a $100 monthly child allowance</title>
      <link href="/local-child-allowance-maps" rel="alternate" type="text/html" title="Mapping the impact of a $100 monthly child allowance" />
      <published>2021-08-02T00:00:00+00:00</published>
      <updated>2021-08-02T00:00:00+00:00</updated>
      <id>/local-child-allowance-maps</id>
      <content type="html" xml:base="/local-child-allowance-maps">&lt;p&gt;When the American Rescue Plan &lt;a href=&quot;http://ubicenter.org/advance-ctc&quot;&gt;expanded the Child Tax Credit,&lt;/a&gt; it brought child poverty into the limelight. Beyond the federal government making that expansion permanent, state and local governments have an opportunity to reduce child poverty through child allowances of their own. Building on our &lt;a href=&quot;https://www.ubicenter.org/child-allowance-state-simulation&quot;&gt;state-level child allowance impacts&lt;/a&gt;, here we present two maps, for upper and lower state legislative districts, of a simple policy: $100 per month for each child under age 18.&lt;/p&gt;

&lt;p&gt;Nationwide, a $100 monthly child allowance would reduce child poverty by 20%,&lt;sup id=&quot;fnref:discrepancy&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:discrepancy&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but in some districts, like Minnesota’s 18B House district (Glencoe), it would cut child poverty by over 50%, and in others, like California’s 17th Assembly district (San Francisco), the effect would be under 10%. The policy generally has larger antipoverty effects in districts with lower housing costs.&lt;/p&gt;

&lt;p&gt;How would a child allowance affect child poverty in your state legislative district? Explore the maps below to find out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These may take a few seconds to load, and zooming will be slow. Sorry, we’re working on speeding it up!&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;map-by-upper-state-legislative-district&quot;&gt;Map by upper state legislative district&lt;/h1&gt;

&lt;p&gt;For example, this shows each California Senate district.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/markdown_assets/local-child-allowance-maps/upper_district.html&quot;&gt;&lt;em&gt;Load it fullscreen here.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#upper_district&quot;).load(&quot;/assets/markdown_assets/local-child-allowance-maps/upper_district.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;upper_district&quot;&gt;&lt;/div&gt;

&lt;h1 id=&quot;map-by-lower-state-legislative-district&quot;&gt;Map by lower state legislative district&lt;/h1&gt;

&lt;p&gt;For example, this shows each California Assembly district.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/markdown_assets/local-child-allowance-maps/lower_district.html&quot;&gt;&lt;em&gt;Load it fullscreen here.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#lower_district&quot;).load(&quot;/assets/markdown_assets/local-child-allowance-maps/lower_district.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;lower_district&quot;&gt;&lt;/div&gt;

&lt;h1 id=&quot;appendix-how-we-built-it&quot;&gt;Appendix: how we built it&lt;/h1&gt;

&lt;p&gt;All prior UBI Center analyses in the US have used the Current Population Survey March Supplement, which contains official estimates of the Official Poverty Measure and Supplemental Poverty Measure (SPM, which we favor for its inclusion of taxes, transfers, and housing costs). This is the most in-depth household survey, but because of its small sample size, the Census Bureau doesn’t release microdata at the local level.&lt;/p&gt;

&lt;p&gt;This analysis instead uses the American Community Survey (ACS), which has a larger sample size and, accordingly, finer geographic detail. Only recently has the ACS provided a comprehensive poverty measure like the SPM, thanks to Census Bureau estimates described in &lt;a href=&quot;https://www.census.gov/content/dam/Census/library/working-papers/2020/demo/SEHSD-WP2020-09.pdf&quot;&gt;Fox, Glassman, and Pacas (2020)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To construct this map, we merged multiple datasets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Population by block (the Census Bureau’s finest geographical unit) from the 2010 Census Summary File 1 (via the &lt;a href=&quot;https://github.com/jtleider/censusdata&quot;&gt;CensusData Python package&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Population by block group from the 2019 ACS (via &lt;a href=&quot;https://www.nhgis.org/&quot;&gt;NHGIS&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;A crosswalk from block (the Census’s smallest geographic unit) to state legislative district&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From these datasets, we produced a block-level dataset with population (adjusted for growth from 2010 to 2019) and all geographic groupings (ACS public use microdata areas, census tracts, counties, and upper and lower state legislative districts). We’ve made this block-level dataset, along with aggregations by PUMA and legislative district which power these maps, available &lt;a href=&quot;https://github.com/UBICenter/local-child-allowance/tree/main/data&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:discrepancy&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Our &lt;a href=&quot;https://www.ubicenter.org/child-allowance-state-simulation&quot;&gt;state-level child allowance post&lt;/a&gt; found that a $100 monthly child allowance would reduce child poverty by 22% instead of 20%. This discrepancy is due to different data sources: that used the Current Population Survey, where this uses the American Community Survey. &lt;a href=&quot;#fnref:discrepancy&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;ben&quot;, &quot;nicholas&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      
        <category term="local" />
      

      
        <summary type="html">The policy would cut child poverty by a fifth nationwide, but effects would vary geographically.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">The beginning of a new Child Tax Credit</title>
      <link href="/advance-ctc" rel="alternate" type="text/html" title="The beginning of a new Child Tax Credit" />
      <published>2021-07-18T00:00:00+00:00</published>
      <updated>2021-07-18T00:00:00+00:00</updated>
      <id>/advance-ctc</id>
      <content type="html" xml:base="/advance-ctc">&lt;p&gt;On Thursday, millions of families started receiving their first monthly Child Tax Credit payments, in the American Rescue Plan’s broadest transfer since its $1,400 relief payments. The poorest children in the country are newly eligible for the full value of the Child Tax Credit, including these monthly payments, and as a result, deep child poverty could fall by as much as half.&lt;/p&gt;

&lt;p&gt;It’s an historic time for antipoverty policy, and activists are fighting to make the policy permanent. And yet, the program’s design will result in overpayments, underpayments, exclusion errors, and high marginal tax rates for parents. In this post, I review the changes underway, alternative policy designs to address these issues, and our research on child allowances.&lt;/p&gt;

&lt;h1 id=&quot;history-of-the-child-tax-credit&quot;&gt;History of the Child Tax Credit&lt;/h1&gt;

&lt;p&gt;The Clinton administration created the Child Tax Credit (CTC) in 1997, coinciding with broader welfare reform. In his book, &lt;a href=&quot;https://www.google.com/books/edition/The_Fiscalization_of_Social_Policy/0VVYDwAAQBAJ?hl=en&quot;&gt;The Fiscalization of Social Policy&lt;/a&gt;, sociologist Joshua McCabe describes how tax credits became major components of American welfare policy, and argues that they evolved as a “strategic adaptation to austerity.”&lt;/p&gt;

&lt;p&gt;The CTC has historically been &lt;em&gt;partially refundable.&lt;/em&gt; Tax credit refundability refers to whether tax filers with no net federal tax liability benefit; refundable tax credits are therefore more progressive than non-refundable credits, since lower-income tax filers are less likely to have net tax liability. A portion of the CTC, called the &lt;em&gt;Additional Child Tax Credit&lt;/em&gt;, is refundable, though this portion also phases in with income. The full value is only available to those with federal tax liability, reducing that liability toward zero. The credit also phases out with income for higher earners. Tax filers receive the benefit once they do taxes the following year.&lt;/p&gt;

&lt;p&gt;Since its creation, the CTC has been expanded multiple times, most recently as part of the 2017 Tax Cuts and Jobs Act. &lt;a href=&quot;https://taxfoundation.org/child-tax-credit/&quot;&gt;This reform&lt;/a&gt; doubled the maximum amount to $2,000 per child, increased the refundable portion, extended the phase-out threshold, and limited the credit for children and dependents without Social Security numbers. The Joint Committee on Taxation &lt;a href=&quot;https://www.jct.gov/publications/2017/jcx-67-17/&quot;&gt;estimated&lt;/a&gt; that these CTC reforms cost $544 billion from 2018 to 2027, 37% of the bill’s $1.5 trillion net cost over that period.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-07-18-advance-ctc/tf_tcja_ctc.png&quot; alt=&quot;How TCJA changed the Child Tax Credit&quot; title=&quot;How TCJA changed the Child Tax Credit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-the-american-rescue-plan-changed-the-child-tax-credit&quot;&gt;How the American Rescue Plan changed the Child Tax Credit&lt;/h1&gt;

&lt;p&gt;For the 2021 tax year only, the American Rescue Plan makes four major changes to the CTC:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Extends eligibility to 17-year-olds&lt;/li&gt;
  &lt;li&gt;Raises the maximum amount from $2,000 per child to $3,600 for children under age 6 and $3,000 for children aged 6 to 17; this higher amount is available to parents with income below $75,000 (single) or $150,000 (married)&lt;/li&gt;
  &lt;li&gt;Makes the credit fully refundable&lt;/li&gt;
  &lt;li&gt;Prepays half the expected 2021 credit on a monthly basis, beginning in July 2021&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The below chart from the &lt;a href=&quot;https://crsreports.congress.gov/product/pdf/IN/IN11613&quot;&gt;Congressional Research Service&lt;/a&gt; shows the change for a married taxpayer with one child under age six. Families with low income gain the most, especially those with zero income who previously received $0 and now receive the full benefit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-07-18-advance-ctc/crs_arp_ctc.png&quot; alt=&quot;How ARP changed the Child Tax Credit&quot; title=&quot;How ARP changed the Child Tax Credit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Joint Committee on Taxation &lt;a href=&quot;https://www.jct.gov/publications/2021/jcx-14-21/&quot;&gt;estimates&lt;/a&gt; that this reform costs $110 billion, 6% of the American Rescue Plan’s total $1.9 trillion cost (my &lt;a href=&quot;https://www.openrg.com/reports/QN_ARPA_Distribution.pdf&quot;&gt;research&lt;/a&gt; with OpenRG colleagues estimates the cost at $101 billion). The Niskanen Center &lt;a href=&quot;https://www.niskanencenter.org/wp-content/uploads/2021/02/Analysis-of-the-Romney-Child-Allowance_final.pdf&quot;&gt;projects&lt;/a&gt; that the reform will lower child poverty by 39%, the bulk of the American Rescue Plan’s total child poverty reduction, which the Columbia Center on Poverty and Social Policy &lt;a href=&quot;https://www.povertycenter.columbia.edu/news-internal/2021/presidential-policy/american-family-plan-poverty-impact&quot;&gt;estimates&lt;/a&gt; to be 47%.&lt;/p&gt;

&lt;iframe width=&quot;600&quot; height=&quot;371&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vRurbf8SIZ9FNptyJt4TpeSoXfHbWJnqhja89b4XhHAewtnDEVnYQzwb1rdorwqzzEf8WPGI1GPK1PL/pubchart?oid=1635111739&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;Evidence we’ve compiled&lt;/a&gt; suggests that these child poverty reductions will improve educational outcomes, health, and other forms of child development, helping kids grow into more financially successful and long-lived adults.&lt;/p&gt;

&lt;p&gt;However, these poverty estimates assume that the credit reaches all eligible families. Whether this reflects reality is yet to be seen, and one of the primary concerns child poverty experts have had with the bill.&lt;/p&gt;

&lt;h1 id=&quot;difficulty-reaching-poor-families&quot;&gt;Difficulty reaching poor families&lt;/h1&gt;

&lt;p&gt;The IRS has successfully reached most tax filers for the Advance CTC, as they did with the three rounds of Economic Impact Payments. However, they lack sufficient records to automatically deliver payments to families that don’t earn enough to have to file taxes (“non-filers”), because they must verify that their income doesn’t disqualify them. In April 2020, the IRS created a &lt;a href=&quot;https://www.irs.gov/newsroom/treasury-irs-launch-new-tool-to-help-non-filers-register-for-economic-impact-payments&quot;&gt;tool&lt;/a&gt; for non-filers to enter their information and receive CARES Act recovery payments, which they kept up &lt;a href=&quot;https://www.irs.gov/newsroom/register-by-nov-21-to-get-an-economic-impact-payment-same-deadline-for-federal-beneficiaries-to-get-missed-500-per-child-payments&quot;&gt;until November&lt;/a&gt;. Non-filers who missed that deadline have to file taxes to receive the benefit. Over that time, only about &lt;a href=&quot;https://www.peoplespolicyproject.org/2021/05/17/irs-confirms-major-ctc-participation-problems/&quot;&gt;one in three non-filers&lt;/a&gt; used the tool to sign up for payments, leaving 9 million eligible families without their payment (some will still end up getting it by filing taxes in the future).&lt;/p&gt;

&lt;p&gt;The IRS created a &lt;a href=&quot;https://www.freefilefillableforms.com/#/fd/childtaxcredit&quot;&gt;similar tool&lt;/a&gt; for non-filers to request the Advance Child Tax Credit, targeting the &lt;a href=&quot;https://www.washingtonpost.com/us-policy/2021/07/15/biden-child-tax-credit/&quot;&gt;seven million children&lt;/a&gt; (of America’s ten million total poor children) in non-filer households. As Paul Williams has &lt;a href=&quot;https://www.peoplespolicyproject.org/2021/06/18/the-child-tax-credit-non-filer-tool-is-a-mess/&quot;&gt;documented&lt;/a&gt;, the tool is only designed for computers, which about half of non-filers lack. The site doesn’t have a memorable .gov URL (it’s &lt;a href=&quot;http://freefilefillableforms.com/#/fd/childtaxcredit&quot;&gt;freefilefillableforms.com/#/fd/childtaxcredit&lt;/a&gt;), isn’t quickly linked from official sites (it takes three clicks from &lt;a href=&quot;http://childtaxcredit.gov/&quot;&gt;childtaxcredit.gov&lt;/a&gt;, once you know where to look), &lt;a href=&quot;https://www.washingtonpost.com/business/2021/06/15/irs-child-tax-credit-tool/&quot;&gt;requires an email address&lt;/a&gt;, and doesn’t preview on social media sites. The &lt;a href=&quot;https://www.washingtonpost.com/business/2021/06/15/irs-child-tax-credit-tool/&quot;&gt;720,000 children&lt;/a&gt; whose parents used the Economic Impact Payment non-filer tool will receive the CTC, but according to Matt Bruenig of the People’s Policy Project, the IRS only expects to reach &lt;a href=&quot;https://www.peoplespolicyproject.org/2021/05/17/irs-confirms-major-ctc-participation-problems/&quot;&gt;90 percent of eligible children&lt;/a&gt;, indicating that non-filers will largely miss out.&lt;/p&gt;

&lt;p&gt;Some tax filers will also use &lt;a href=&quot;https://www.irs.gov/credits-deductions/child-tax-credit-update-portal&quot;&gt;IRS tools&lt;/a&gt; to track eligibility, update their family structure (number of children and marital status), income, or bank details, or to opt out. Updating income will not be possible until later in the summer. Since the payment is based on income in 2020, which was lower than income in 2021 overall due to the pandemic, many families will have to reconcile overpayments in 2022 unless they use these tools. Pandemic aside, those with volatile incomes may have to update their information regularly to avoid unexpected tax bills; this is one way in which means-tested programs require people to effectively do their taxes multiple times per year.&lt;/p&gt;

&lt;p&gt;Why these issues? Some are unavoidable with means-tested programs: the IRS has to verify income somehow, and that’s harder than simply verifying a person’s existence, especially as many families see incomes rise and fall over time. Some also trace to an &lt;a href=&quot;https://www.federalregister.gov/documents/2002/11/04/02-27909/irs-intent-to-enter-into-an-agreement-with-free-file-alliance-llc-ie-free-file-alliance&quot;&gt;agreement&lt;/a&gt; the IRS has with the Free Filer Alliance, a consortium of tax preparers, stating that those tax preparers, rather than the IRS, will provide free filing services. The IRS considers non-filer tools for Economic Impact Payments and the Advance CTC as tax filing services, hence the freefilefillableforms.com rather than irs.gov domain. On the same day the Advance CTC started delivering payments, Intuit, which makes TurboTax, announced that it would &lt;a href=&quot;https://www.intuit.com/blog/news-social/accelerating-technology-innovation-to-better-help-consumers-solve-their-most-pressing-financial-problems/&quot;&gt;leave the Free Filer Alliance&lt;/a&gt;, as H&amp;amp;R Block did in &lt;a href=&quot;https://news.bloombergtax.com/daily-tax-report/irss-free-file-partners-moving-forward-without-h-r-block&quot;&gt;June 2020&lt;/a&gt;. Whether or not this is a sign that the IRS could renegotiate the Free Filer Alliance agreement and provide their own non-filer tool, policymakers can consider designing the program without the need to collect income information.&lt;/p&gt;

&lt;h1 id=&quot;advantages-of-a-universal-child-allowance&quot;&gt;Advantages of a universal child allowance&lt;/h1&gt;

&lt;p&gt;While means-testing the CTC expansion lowers poverty more for a given budget (at least on paper, assuming full take-up), universality offers other advantages.&lt;/p&gt;

&lt;p&gt;Senator Mitt Romney’s &lt;a href=&quot;https://www.ubicenter.org/family-security-act&quot;&gt;Family Security Act&lt;/a&gt; child allowance bill takes a different path than the ARP CTC, by&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Phasing out at higher incomes: $200,000 for singles and $400,000 for married filers&lt;/li&gt;
  &lt;li&gt;Delivering to all parents, and then has ineligible parents repay the following year at tax time&lt;/li&gt;
  &lt;li&gt;Being administered through the Social Security Administration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Social Security Administration has &lt;a href=&quot;https://www.ssa.gov/org/&quot;&gt;over 1,200 field offices&lt;/a&gt; across the country, and enrolls every newborn in their system. Running short-term programs through the IRS allows payments to quickly reach those who have filed taxes, but long-term programs may have greater success with a brick-and-mortar footprint (it’s rare to hear concerns that people eligible for Social Security aren’t receiving benefits).&lt;/p&gt;

&lt;p&gt;But the Social Security Administration doesn’t have income information. This can be an advantage, as it forces the program eligibility rules to be simple, as the Romney bill’s rules are. But to the extent that payments are means-tested, they’ll have to be repaid at tax time. High-income parents can weather those surprise tax bills, and many have significant reconciliation anyway, but a $6,000 surprise tax bill could significantly disrupt the finances of a single parent with $100,000 income.&lt;/p&gt;

&lt;p&gt;Beyond facilitating the Social Security Administration distributing child benefits and avoiding over- and under-payments, making the benefit universal avoids disparate taxation by parental status. Both the ARP CTC and Romney’s bill levy higher marginal tax rates on high-income parents than high-income people without children. In effect, means-testing places the cost of a universal child allowance on high-income parents; making it truly universal costs more, but if funded by progressive taxation, those costs would be more equitably borne by &lt;em&gt;all&lt;/em&gt; high-income people.&lt;/p&gt;

&lt;h1 id=&quot;parents-may-work-less-in-the-market-but-kids-will-benefit&quot;&gt;Parents may work less in the market, but kids will benefit&lt;/h1&gt;

&lt;p&gt;As I wrote in a paper on Romney’s &lt;a href=&quot;https://www.ubicenter.org/family-security-act&quot;&gt;Family Security Act&lt;/a&gt;, child allowances will likely modestly reduce parental formal labor supply. That bill, like ARP’s CTC expansion, removes the benefit’s phase-in, creating a relative increase to low-income parents’ marginal tax rates. Families with income around the phase-out region will also face higher marginal tax rates. People respond to higher marginal tax rates by &lt;a href=&quot;https://www.cbo.gov/sites/default/files/cbofiles/attachments/10-25-2012-Labor_Supply_and_Fiscal_Policy.pdf&quot;&gt;working less&lt;/a&gt;, so we can expect parents with income in the affected regions to spend less time in the formal labor market.&lt;/p&gt;

&lt;p&gt;These effects on marginal tax rates outweigh the effects of the assistance itself. The extent to which people work less when they have more income, the &lt;em&gt;income effect&lt;/em&gt;, is empirically small: the Congressional Budget Office estimates that each 1% increase to income reduces labor supply by 0.05% (about a sixth the size of labor supply responses to higher marginal tax rates). To the extent that extra income causes parents to work less, they may also spend more time with their children.&lt;/p&gt;

&lt;p&gt;This extra parental involvement and purchasing power will benefit kids. Cash assistance differs from restrictive in-kind benefits like nutrition assistance, childcare subsidies, or housing vouchers, which are more costly to administer and more complicated to use. Evidence of the tangible gains to children whose families receive cash assistance indicates that parents use cash wisely; if the money were routinely squandered, giving money to parents wouldn’t help kids. If anything, cash transfers generally &lt;a href=&quot;https://www.journals.uchicago.edu/doi/abs/10.1086/689575&quot;&gt;reduce consumption of temptation goods&lt;/a&gt;, and &lt;a href=&quot;https://www.ubicenter.org/canada-homelessness-experiment&quot;&gt;our analysis&lt;/a&gt; of a study in Canada found that parents experiencing homelessness increased spending on kids more than any other category. Restricting low-income parents’ purchases is costly and unnecessary.&lt;/p&gt;

&lt;h1 id=&quot;our-past-and-future-research&quot;&gt;Our past and future research&lt;/h1&gt;

&lt;p&gt;Several of our studies find that child allowances cost-effectively reduce poverty:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ubicenter.org/child-allowance-state-simulation&quot;&gt;Across US states&lt;/a&gt;, a $300 per month child allowance generally cuts child poverty in half and overall poverty by 20-25%.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ubicenter.org/child-ubi-share&quot;&gt;Including children in fixed UBI budgets&lt;/a&gt; makes policies more progressive (we’ve also found this &lt;a href=&quot;https://www.ubicenter.org/progressive-adjustments-lib-dem-working-group&quot;&gt;in the UK&lt;/a&gt;), and for smaller budgets, planners can optimize poverty and inequality by giving _more _to children than adults.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1gLO94eKp3b1m19Ev14deGrd4TxjdCnHv/view&quot;&gt;Compared to childcare subsidies&lt;/a&gt;, budget-equivalent child allowances reduce poverty and inequality more. Replacing childcare costs has about a third of the poverty impact as spending the money on universal cash, and a transfer equal to the cost of childcare in one’s state to all parents is also less progressive than a uniform national child allowance, because richer parents live in areas where childcare is more expensive.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;uscalc.ubicenter.org&quot;&gt;Our budget-neutral UBI calculator&lt;/a&gt; shows that a variety of child allowance policies reduce child poverty, even when replacing benefit programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re continuing to invest in child allowance research; for example, in the near future we’ll publish interactive maps of child allowance poverty impacts by local area, such as state legislative districts.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Before Thursday, 28% of Americans lived in households receiving a monthly check from the federal government. The new CTC &lt;a href=&quot;https://twitter.com/MattBruenig/status/1416585999707164672&quot;&gt;more than doubled that share&lt;/a&gt; to 65%. Alongside the $1,400 recovery payments, it makes the American Rescue Plan perhaps the &lt;a href=&quot;https://thehill.com/opinion/finance/552333-the-american-rescue-plan-was-a-step-toward-universal-basic-income&quot;&gt;largest step toward universal basic income&lt;/a&gt; the US has taken in decades. But policymakers shouldn’t rest on their laurels: fixing technical issues will enhance the antipoverty impact, and designing a robust post-2021 policy will make the changes durable.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Max Ghenis</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">On paper, the monthly payment halves deep child poverty, but fulfilling its potential will take work.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Analysis of Senator Romney’s Family Security Act</title>
      <link href="/family-security-act" rel="alternate" type="text/html" title="Analysis of Senator Romney's Family Security Act" />
      <published>2021-02-12T00:00:00+00:00</published>
      <updated>2021-02-12T00:00:00+00:00</updated>
      <id>/family-security-act</id>
      <content type="html" xml:base="/family-security-act">&lt;p&gt;On February 4, Senator Mitt Romney (R-UT) introduced the &lt;a href=&quot;https://templates.legal/family-security-act-one-pager/&quot;&gt;Family Security Act&lt;/a&gt;, a monthly child allowance funded by replacing redundant programs and ending regressive tax expenditures. While it phases out at high incomes and caps the total benefit amount for large families, the policy is the most generous of the major proposals put forward and comes closest to a universal child allowance.&lt;/p&gt;

&lt;p&gt;The Family Security Act (FSA) would significantly reduce poverty, and especially deep child poverty. As a budget-neutral policy, it could be made permanent through budget reconciliation, which requires only 50 votes in the Senate. And because the payments go to all parents, with high-income parents repaying it when filing taxes, it doesn’t require special mechanisms to target parents on income when sending checks.&lt;/p&gt;

&lt;p&gt;Here’s what the FSA does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pays parents $350 per month per child under age 6 and $250 per month for children age 6 to 17, with a maximum total benefit of $1,250 per month, through the Social Security Administration (SSA)&lt;/li&gt;
  &lt;li&gt;Taxes parents at 5 percent of each dollar of child allowances for singles with income above $200,000 and couples with income above $400,000, at tax time through the IRS&lt;/li&gt;
  &lt;li&gt;Repeals the existing Child Tax Credit (CTC), which maxes out at $2,000 per child per year but excludes the poorest children through its phase-in design&lt;/li&gt;
  &lt;li&gt;Replaces the current Earned Income Tax Credit (EITC), which largely benefits families with children, with a per-worker wage subsidy of up to $1,000 per worker&lt;/li&gt;
  &lt;li&gt;Repeals the Temporary Assistance for Needy Families (TANF) federal block grant&lt;/li&gt;
  &lt;li&gt;Repeals the Child and Dependent Care Tax Credit (CDCTC), which provides up to $3,000 per child or dependent, but excludes poor families&lt;/li&gt;
  &lt;li&gt;Repeals the State and Local Tax (SALT) deduction&lt;/li&gt;
  &lt;li&gt;Repeals the Head of Household (HoH) filing status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While that’s a substantial array of reforms, it would dramatically reduce the complexity of the US tax and benefit system. Nobody’s yet conducted a full distributional analysis of all the components together, &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but both the child benefit replacements and the tax reforms are independently very progressive.&lt;/p&gt;

&lt;h2 id=&quot;the-child-allowance-is-mostly-funded-by-repealing-existing-programs-and-the-salt-deduction&quot;&gt;The child allowance is mostly funded by repealing existing programs and the SALT deduction&lt;/h2&gt;

&lt;p&gt;According to the Niskanen Center, which helped craft the policy, the two new programs introduced by the Family Security Act would cost $254 billion: $229.5 billion for the child allowance and $24.5 billion for the worker credit. The largest cost offsets are the programs they directly replace: the $117 billion CTC and the $71 billion EITC.&lt;/p&gt;

&lt;iframe width=&quot;759&quot; height=&quot;470&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vRurbf8SIZ9FNptyJt4TpeSoXfHbWJnqhja89b4XhHAewtnDEVnYQzwb1rdorwqzzEf8WPGI1GPK1PL/pubchart?oid=1916198415&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The other largest cost offset is SALT repeal ($25.2 billion). After that, TANF repeal ($16.5 billion), HoH repeal ($16.5 billion), CDCTC repeal ($4.7 billion), and SNAP categorical eligibility changes ($3.1 billion from people who no longer automatically qualify for SNAP through TANF) round out the program’s budget neutrality.&lt;/p&gt;

&lt;h2 id=&quot;the-family-security-act-cuts-deep-child-poverty-in-half&quot;&gt;The Family Security Act cuts deep child poverty in half&lt;/h2&gt;

&lt;p&gt;The Niskanen Center &lt;a href=&quot;https://www.niskanencenter.org/wp-content/uploads/2021/02/Analysis-of-the-Romney-Child-Allowance_final.pdf&quot;&gt;estimated the poverty impact&lt;/a&gt; of this reform by simulating the primary components that would affect people in poverty (all but SALT, CDCTC, and the minor categorical eligibility changes to SNAP). They found that the FSA would cut child poverty by a third, cut deep child poverty (below half the poverty line) by half, and cut adult and overall poverty by 8 and 14 percent, respectively.&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;iframe width=&quot;600&quot; height=&quot;371&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vRurbf8SIZ9FNptyJt4TpeSoXfHbWJnqhja89b4XhHAewtnDEVnYQzwb1rdorwqzzEf8WPGI1GPK1PL/pubchart?oid=1618008061&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;What explains such large antipoverty effects? Chiefly, filling in the CTC’s exclusion of the poorest children. This exclusion is &lt;a href=&quot;https://www.taxpolicycenter.org/briefing-book/what-child-tax-credit&quot;&gt;by design&lt;/a&gt;, since only part of the credit is refundable (i.e., benefits families who don’t owe taxes), and the refundable part phases in with income.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.taxpolicycenter.org/sites/default/files/styles/original_optimized/public/book_images/3.4.1.1.png?itok=Vba42ckx&quot; alt=&quot;Child Tax Credit schedule&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The EITC also excludes the poorest children via a similar phase-in structure. It primarily goes to families with children, providing at most &lt;a href=&quot;https://www.irs.gov/credits-deductions/individuals/earned-income-tax-credit/earned-income-and-earned-income-tax-credit-eitc-tables#EITC%20Tables&quot;&gt;$543 to childless workers&lt;/a&gt;. Even with these designs, the antipoverty effects of refundable tax credits like the EITC and CTC are &lt;a href=&quot;https://www.peoplespolicyproject.org/2020/05/18/the-myths-of-the-earned-income-tax-credit/&quot;&gt;typically overstated&lt;/a&gt; because they neglect that &lt;a href=&quot;https://www.eitc.irs.gov/eitc-central/statistics-for-tax-returns-with-eitc/statistics-for-tax-returns-with-eitc&quot;&gt;one in five&lt;/a&gt; eligible families fails to claim them, often due to complex application processes.&lt;/p&gt;

&lt;p&gt;Federal TANF funding has been fixed at $16.5 billion since it replaced Aid to Families with Dependent Children (AFDC) in 1996. Unlike AFDC, which was a federal cash assistance program, TANF is a block grant that provides states wide latitude on how to distribute the funds. In 2019, &lt;a href=&quot;https://www.cbpp.org/research/family-income-support/to-lessen-hardship-states-should-invest-more-tanf-dollars-in-basic&quot;&gt;21 percent&lt;/a&gt; of total (federal plus state) TANF dollars provided cash assistance, and 9 percent provided refundable tax credits like state-level EITCs. The remaining 70 percent funded work programs, programs for children, more exotic programs like &lt;a href=&quot;https://www.marketplace.org/2016/05/31/twenty-years-after-welfare-reform-how-are-states-spending-funds/&quot;&gt;marriage counseling&lt;/a&gt;, and abuses like &lt;a href=&quot;https://www.clarionledger.com/story/news/politics/2020/05/04/ms-welfare-scandal-audit-94-m-questionable-spending/3076949001/&quot;&gt;speeches from football stars&lt;/a&gt;. And because the block grant is a matching fund, federal funding varies considerably by state, flowing &lt;a href=&quot;https://www.niskanencenter.org/inequitable-and-inadequate-reforming-federal-grants-for-state-social-assistance-programs/&quot;&gt;disproportionately to richer states&lt;/a&gt;: in 2019, New York got the most at $604 per child, while Nevada got the least at $63 per child. Finally, TANF cash assistance carries lifetime limits and work requirements that keep it out of reach from &lt;a href=&quot;https://www.cbpp.org/research/family-income-support/cash-assistance-should-reach-millions-more-families-to-lessen&quot;&gt;77 percent of poor families&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike tax credits and work-oriented low-cash welfare programs, universal child allowances are designed to reach all poor children, and the Social Security Administration’s expertise in cash transfers would likely turn that design into reality.&lt;/p&gt;

&lt;h2 id=&quot;tax-reforms-make-the-policy-even-more-progressive&quot;&gt;Tax reforms make the policy even more progressive&lt;/h2&gt;

&lt;p&gt;The Family Security Act’s funding can be divided into welfare programs—EITC, CTC, and TANF—and tax reforms—SALT, HoH, and CDCTC. The policy’s poverty reduction indicates that the welfare component is progressive, and the tax reforms meet the remaining revenue needs.&lt;/p&gt;

&lt;p&gt;This trio of tax reforms is highly progressive; that is, they reduce the after-tax income of rich people more than poor people. The bottom third of taxpayers would experience virtually no income loss, and the impact mostly rises with income. The 8th decile is most affected, losing an average of 0.6 percent of after-tax income from the tax reforms (the child allowance would offset this for many). SALT repeal is the most progressive component, and the largest; HoH and CDCTC repeal are also progressive on their own, but less than SALT.&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;iframe width=&quot;695&quot; height=&quot;442&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vRurbf8SIZ9FNptyJt4TpeSoXfHbWJnqhja89b4XhHAewtnDEVnYQzwb1rdorwqzzEf8WPGI1GPK1PL/pubchart?oid=1136237369&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Repealing these policies would simplify the tax system and align it with that of other countries. &lt;a href=&quot;https://www.vox.com/policy-and-politics/2017/10/30/16557554/the-state-and-local-tax-deduction-explained&quot;&gt;SALT deductions&lt;/a&gt; or &lt;a href=&quot;https://www.niskanencenter.org/wp-content/uploads/2021/02/Analysis-of-the-Romney-Child-Allowance_final.pdf&quot;&gt;head of household filing status&lt;/a&gt; are both rare among countries like the US. Removing the head of household status, which is available to parents who pay most of the costs of maintaining a household while living with a child for most of a calendar year, would cut the filing statuses from four to three and &lt;a href=&quot;https://www.cbo.gov/budget-options/54789&quot;&gt;reduce verification burdens on the IRS&lt;/a&gt;. And child allowances make nonrefundable tax credits like the CDCTC obsolete.&lt;/p&gt;

&lt;h2 id=&quot;the-policy-would-probably-reduce-labor-supply-a-bit&quot;&gt;The policy would probably reduce labor supply a bit&lt;/h2&gt;

&lt;p&gt;Policy reforms generally affect labor supply in two ways: the &lt;em&gt;income effect&lt;/em&gt; and the &lt;em&gt;substitution effect&lt;/em&gt;. The income effect describes how people work less when they have more net income; this is welfare-enhancing as they trade work for leisure. The substitution effect describes how people work less when they benefit less from that work due to higher marginal tax rates; this is welfare-reducing since they would prefer to have the income from working.&lt;/p&gt;

&lt;p&gt;Universal basic incomes, and similarly structured programs like the &lt;a href=&quot;https://pfd.alaska.gov/&quot;&gt;Alaska Permanent Fund Dividend&lt;/a&gt;, reduce labor supply through the income effect only. Negative income taxes, a form of guaranteed income that provides a minimum guarantee and then phases out steadily with earnings, reduce labor supply through both the income effect and the substitution effect, since the phase-out is equivalent to a higher marginal tax rate. _Trapezoid _programs, which phase in with income, pay a certain maximum amount, and then phase out with income, increase labor supply in the phase-in region via the substitution effect, reduce labor supply throughout via the income effect, and decrease labor supply in the phase-out region via the substitution effect. Trapezoids can be explicit, like the CTC and EITC, or more implicit, like the CDCTC (which effectively phases in because it’s not refundable) or TANF (which carries &lt;a href=&quot;https://www.cbpp.org/research/family-income-support/temporary-assistance-for-needy-families&quot;&gt;work requirements&lt;/a&gt; that create a de facto discontinuous phase-in, though these can also be fulfilled by uncompensated work-seeking or training programs).&lt;/p&gt;

&lt;p&gt;Studies show that substitution effects outweigh income effects. To compare the effects, we can express them quantitatively as &lt;em&gt;elasticities&lt;/em&gt;; that is, the percent change in hours worked with respect to a one-percent change in the underlying factor. That factor is the after-tax marginal wage rate for the substitution effect, and the after-tax average wage rate for the income effect. Reviewing the empirical literature, the &lt;a href=&quot;https://www.cbo.gov/sites/default/files/112th-congress-2011-2012/reports/43674-laborsupplyfiscalpolicy.pdf&quot;&gt;Congressional Budget Office&lt;/a&gt; estimates that the substitution elasticity is 0.25 for primary earners (a one-percent change to the after-tax marginal wage increases hours worked by 0.25 percent), and estimates that the income elasticity is -0.05 (a one-percent change to the after-tax average wage rate reduces hours worked by 0.05 percent). They also find that substitution effects are stronger among poorer earners and secondary earners, and that income effects are fairly consistent across earner types.&lt;/p&gt;

&lt;p&gt;Components of the Family Security Act create both positive and negative income effects, and positive and negative substitution effects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By itself, the new child allowance reduces labor supply through the income effect, and also through the substitution effect for high earners.&lt;/li&gt;
  &lt;li&gt;Repealing the trapezoids—CTC, CDCTC, the child component of the EITC, and TANF—has various effects depending on income, as described above.&lt;/li&gt;
  &lt;li&gt;Expanding the EITC for childless workers into an earner credit will also have various effects depending on income, as another trapezoid.&lt;/li&gt;
  &lt;li&gt;Repealing SALT and HoH reduces labor supply through the substitution effect and increases labor supply through the income effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In lieu of a comprehensive analysis of how the full reform affects marginal and effective tax rates, we can consider where each effect will be strongest. The largest substitution effects are probably the loss of CTC phase-ins and the higher taxes from SALT repeal, both of which will reduce labor supply (though removing TANF’s severe phase-outs, such as &lt;a href=&quot;https://ca.db101.org/ca/programs/income_support/calworks/program2b.htm&quot;&gt;50 percent in California&lt;/a&gt;, will also increase labor supply). Income effects are weaker, and by their nature tend to balance out in budget-neutral reforms, though they may be higher for low-income people since the child allowance will raise their incomes relatively more. In combination, the bill would probably modestly reduce labor supply.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://www.nap.edu/catalog/25246/a-roadmap-to-reducing-child-poverty&quot;&gt;2019 report&lt;/a&gt; from the National Academies of Science modeled replacing the CTC with a $250 monthly child allowance, phasing out between 300 and 400 percent of the poverty line. Assuming larger income elasticities than the CBO, they found that earnings would fall by $3.9 billion, lowering the antipoverty impact by two percent (from cutting child poverty by 42 percent to cutting it by 41 percent).&lt;/p&gt;

&lt;p&gt;When parents respond to child allowances by working less, they do so in part to care for their children. Evidence suggests that this time spent between parents and their children is beneficial: cash assistance for families &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical.html&quot;&gt;consistently improves child outcomes&lt;/a&gt; like health, development, education, and lifelong outcomes, while childcare subsidies have &lt;a href=&quot;https://www.nber.org/papers/w21571&quot;&gt;mixed effects&lt;/a&gt; on children while &lt;a href=&quot;https://aspe.hhs.gov/pdf-report/effects-ccdf-subsidy-program-employment-outcomes-low-income-mothers&quot;&gt;increasing maternal labor supply&lt;/a&gt;. It also saves parents childcare costs, a factor neither the NAS report nor other such reports have quantified when assessing the labor supply effect on poverty reduction.&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Analysis of welfare programs should include estimates on parental labor supply, but this line of inquiry also requires the context that economic datasets exclude home childcare by parents as a type of labor supply.&lt;/p&gt;

&lt;h2 id=&quot;how-to-improve-the-family-security-act&quot;&gt;How to improve the Family Security Act&lt;/h2&gt;

&lt;p&gt;The FSA offers key benefits absent from other child benefit proposals. House Ways and Means Committee Chair Richard Neal (D-MA) &lt;a href=&quot;https://waysandmeans.house.gov/sites/democrats.waysandmeans.house.gov/files/documents/7.%20Tax_sxs.pdf&quot;&gt;proposed in February&lt;/a&gt; expanding the CTC for one year and making it pay out monthly. Because the Neal proposal is unfunded, it cannot be made permanent law through budget reconciliation as the FSA can. It also pays out $50 less per month to young children, and doesn’t expand the EITC for childless workers. It phases out at lower incomes than the FSA, and sends targeted checks through the IRS based on a taxpayer’s income in the prior year, offering them a web portal to report income or family changes that would affect amounts and avoid surprise bills the next year. The Neal plan also does not make the tax code more progressive at the upper end. The FSA’s simplicity, comprehensiveness, and progressivity sets it apart.&lt;/p&gt;

&lt;p&gt;And yet, there’s room for improvement. The most obvious change would be to make it a truly universal child allowance by removing the phase-out and benefit cap; this would cost &lt;a href=&quot;https://www.peoplespolicyproject.org/2021/02/05/romneys-child-caps-and-phase-outs-are-pointless/&quot;&gt;$7 billion&lt;/a&gt;. The phase-out is a tax on parents, which would be better applied to all people of that income, including people without children. The benefit cap deprives children born to large families of assistance that would help them thrive, and encourages divorce among couples with many children.&lt;/p&gt;

&lt;p&gt;With more revenue, some rare cases of low-income people who get the maximum EITC could also be made whole. While the FSA is a net benefit to nearly all poor people, replacing the EITC with the FSA earner credit leaves some of these people worse off.&lt;/p&gt;

&lt;p&gt;Since the Neal proposal is deficit-funded, those deficit dollars could stack atop the FSA to make these changes and increase the child allowance amount. This combined proposal would cut poverty and inequality more than either policy on its own would. Funding these expansions with more tax revenue or benefit reforms could also protect its budget-neutrality and chance for permanence through reconciliation.&lt;/p&gt;

&lt;h2 id=&quot;investment-in-our-future&quot;&gt;Investment in our future&lt;/h2&gt;

&lt;p&gt;The large antipoverty benefits of the FSA align with our research showing how &lt;a href=&quot;https://child-allowance.ubicenter.org/simulation.html&quot;&gt;child allowances reduce poverty&lt;/a&gt;. Studies from around the world show that child poverty reduction improves child health (physical and mental), child development, educational attainment, earnings as adults, and even lifespan. The policy would reduce adult poverty, too, while shrinking the affordability barrier to people forming the families they want.&lt;/p&gt;

&lt;p&gt;Permanent policies like the FSA will durably reduce poverty and inequality, while creating a precedent for the US government to send monthly cash transfers. Building on this foundation will continue to improve the progressivity, efficiency, legibility, empowerment, and effectiveness of the American tax and benefit system.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The Niskanen Center modeled the child allowance, worker credit, CTC, EITC, TANF, and HoH changes, which explain nearly all of the poverty impacts, using the Current Population Survey March Supplement. They used the Policy Simulation Library’s Tax-Calculator to do so, though this involved data processing outside Tax-Calculator as well; issues &lt;a href=&quot;https://github.com/PSLmodels/Tax-Calculator/issues/2546&quot;&gt;#2546&lt;/a&gt;, &lt;a href=&quot;https://github.com/PSLmodels/Tax-Calculator/issues/2546&quot;&gt;#2547&lt;/a&gt;, and &lt;a href=&quot;https://github.com/PSLmodels/Tax-Calculator/issues/2546&quot;&gt;#2548&lt;/a&gt; would simplify this and make it available on Compute Studio. Their analysis did not consider potential labor supply effects. The CDCTC and (especially) SALT repeals would be more accurately modeled with the IRS Public Use File, which contains higher-quality tax data. I did this with the Policy Simulation Library’s Tax-Brain tool to identify distributional impacts by decile. The SNAP categorical eligibility changes would be more difficult to model, and may be best done with the restricted TRIM3 tool, run by the Department of Health and Human Services. Niskanen did not produce distributional charts by decile, and my Tax-Brain analysis did not provide poverty impacts; neither quantified the share of people who benefit, nor their effective marginal tax rates. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Niskanen used the Census Bureau’s Supplemental Poverty Measure (SPM) from 2019. Unlike the Official Poverty Measure, the SPM accounts for taxes, transfers, and housing costs. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Author’s calculations based on the Policy Simulation Library’s Tax-Calculator software via the Tax-Brain app on Compute Studio. Data is from the IRS Public Use File, extrapolated to represent the year 2021. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The Supplemental Poverty Measure subtracts childcare costs, capped relative to income, when calculating resources. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">The budget-neutral child allowance would reduce poverty, inequality, and complexity.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How much UBI spending should go to children?</title>
      <link href="/child-ubi-share" rel="alternate" type="text/html" title="How much UBI spending should go to children?" />
      <published>2021-01-20T00:00:00+00:00</published>
      <updated>2021-01-20T00:00:00+00:00</updated>
      <id>/child-ubi-share</id>
      <content type="html" xml:base="/child-ubi-share">&lt;p&gt;While the idea of a universal basic income has been around for centuries, it was recently brought into mainstream American political discourse by 2020 Presidential candidate Andrew Yang.
Yang centered his campaign around paying every adult citizen $1,000 each month.
Many other countries take the opposite approach, providing monthly &lt;a href=&quot;http://child-allowance.ubicenter.org&quot;&gt;“child allowance”&lt;/a&gt; payments for each child, an approach now favored by &lt;a href=&quot;https://www.vox.com/future-perfect/2019/3/6/18249290/child-poverty-american-family-act-sherrod-brown-michael-bennet&quot;&gt;many US lawmakers&lt;/a&gt;.
Here we explore which mix of these two approaches reduces poverty and inequality most effectively.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&quot;https://blog.ubicenter.org/20200707/adult_child_ubi.html&quot;&gt;July 2020 post&lt;/a&gt;, we found that a child allowance would be more effective at reducing poverty than an adult UBI, for spending levels up to $500 billion, at which point a UBI for both children and adults becomes more effective; adult-only UBI was never the best option.
But those three options—adults only, kids only, and equal for adults and kids—aren’t the only ones available.
In this post, we calculate the optimal ratios of adult to child UBIs, depending on the total spending and objective.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Turn off display bar
CONFIG = {&quot;displayModeBar&quot;: False}

# Define UBI Center colors
BLUE = &quot;#1976D2&quot;
DARK_BLUE = &quot;#1565C0&quot;
LIGHT_BLUE = &quot;#90CAF9&quot;
GRAY = &quot;#BDBDBD&quot;
BARELY_BLUE = &quot;#E3F2FD&quot;

july_post = pd.read_csv(&quot;https://github.com/ngpsu22/blog/raw/master/july_2020.csv&quot;)

colors = {0: DARK_BLUE, 1: LIGHT_BLUE, 2: GRAY}

fig = px.line(
    july_post,
    x=&quot;spending_in_billions&quot;,
    y=&quot;poverty_rate&quot;,
    color=&quot;ubi_type&quot;,
    color_discrete_map={
        &quot;Child allowance&quot;: DARK_BLUE,
        &quot;Adult UBI&quot;: LIGHT_BLUE,
        &quot;All UBI&quot;: GRAY,
    },
)
fig.update_layout(
    title=&quot;Overall poverty rate and spending on cash transfer programs&quot;,
    xaxis_title=&quot;Spending in billions&quot;,
    yaxis_title=&quot;SPM poverty rate&quot;,
    yaxis_ticksuffix=&quot;%&quot;,
    font=dict(family=&quot;Roboto&quot;),
    hovermode=&quot;x&quot;,
    xaxis_tickprefix=&quot;$&quot;,
    xaxis_ticksuffix=&quot;B&quot;,
    plot_bgcolor=&quot;white&quot;,
    legend_title_text=&quot;&quot;,
)

fig.update_traces(mode=&quot;markers+lines&quot;, hovertemplate=None)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;To start, we modeled how different UBI amounts (funded by a flat tax on taxable income) would impact the poverty rate if children were excluded, received half the UBI, or received the full benefit.
Our model simulated up until $3 trillion in total UBI spending and found that including children further reduces poverty at every level.
For example, at $1.5 trillion in spending, excluding children would give each adult about $500 a month and reduce the overall poverty rate from 11.7 percent to 4.5 percent.
However, at the same amount of spending, including children in the full benefit would lower the poverty rate to 4 percent, lifting an additional 1.6 million people out of poverty.
Poverty is generally similar between giving children a full-size UBI or half the adult amount.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
summary2 = pd.read_csv(
    &quot;https://github.com/ngpsu22/blog/raw/master/child_share_ubi_summary.csv.gz&quot;,
    compression=&quot;gzip&quot;,
)
# Turn off display bar
CONFIG = {&quot;displayModeBar&quot;: False}

# Define UBI Center colors
BLUE = &quot;#1976D2&quot;
DARK_BLUE = &quot;#1565C0&quot;
LIGHT_BLUE = &quot;#90CAF9&quot;
GRAY = &quot;#BDBDBD&quot;
BARELY_BLUE = &quot;#E3F2FD&quot;

# Create figure
fig = px.line()

names = {
    0: &quot;No UBI for children&quot;,
    1: &quot;Half-sized UBI for children&quot;,
    2: &quot;Full-sized UBI for children&quot;,
}

colors = {0: GRAY, 1: LIGHT_BLUE, 2: DARK_BLUE}

percent_steps = [0, 50, 100]

zero = summary2[summary2[&quot;child_percent_ubi&quot;] == 0]
fifty = summary2[summary2[&quot;child_percent_ubi&quot;] == 50]
hundred = summary2[summary2[&quot;child_percent_ubi&quot;] == 100]

dfs = [zero, fifty, hundred]

for i, df in enumerate(dfs):
    # add trace for optimal poverty df
    fig.add_trace(
        go.Scatter(
            x=df[&quot;funding_billions&quot;],
            y=df[&quot;poverty_rate&quot;],
            mode=&quot;markers+lines&quot;,
            name=names[i],
            # assign numpy array with child &amp;amp; adult ubi to customdata argument
            customdata=np.stack(
                (df[&quot;monthly_child_ubi&quot;], df[&quot;monthly_adult_ubi&quot;]), axis=-1
            ),
            # add customdata to hovertemplate
            hovertemplate=(
                &quot;&lt;i&gt;Poverty rate&lt;/i&gt;: %{y:.1f}%&lt;br /&gt;&quot;
                + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
                + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            ),
            line=dict(color=colors[i]),
        )
    )
fig.update_layout(
    title=&quot;Poverty by proportion of adult benefit paid to children&quot;,
    xaxis_title=&quot;Funding in billions&quot;,
    yaxis_title=&quot;SPM poverty rate&quot;,
    yaxis_ticksuffix=&quot;%&quot;,
    font=dict(family=&quot;Roboto&quot;),
    hovermode=&quot;x&quot;,
    xaxis_tickprefix=&quot;$&quot;,
    xaxis_ticksuffix=&quot;B&quot;,
    plot_bgcolor=&quot;white&quot;,
    height=600,
    width=1000,
    margin_b=90,  # add bottom margin for caption
    legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.7)
)

fig.add_layout_image(
    dict(
        source=&quot;https://raw.githubusercontent.com/UBICenter/ubicenter.org/master/assets/images/logos/wide-blue.jpg&quot;,
        # See https://github.com/plotly/plotly.py/issues/2975.
        # source=&quot;../_static/logos/wide-blue.jpg&quot;,
        xref=&quot;paper&quot;,
        yref=&quot;paper&quot;,
        x=1,
        y=-0.15,
        sizex=0.12,
        sizey=0.12,
        xanchor=&quot;right&quot;,
        yanchor=&quot;bottom&quot;,
    )
)

fig.update_traces(mode=&quot;markers+lines&quot;)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Still, the results above only model three scenarios.
In our next simulation, we examined the optimal share of spending that should go to children in order to minimize poverty or reduce inequality.
For each spending level, we simulated 101 scenarios that range from 0 percent of the overall funding going to children to 100 percent.
As a benchmark, we show a line at 22%, which corresponds to equal UBI levels for adults and children (since children comprise 22% of the US population).&lt;/p&gt;

&lt;p&gt;The simplest case is inequality reduction, for which optimal policy would give vast majorities of funds to children.
In fact, an annual child allowance should reach over $17,000 per child before any spending goes towards adults.
Even at $3 trillion in new spending, over half of the money would go towards children, resulting in $1,743 a month for kids and $648 per adult.
This is, to some degree, by construction, as our inequality metric considers per-capita resources; other inequality measures may produce different results.&lt;/p&gt;

&lt;p&gt;If the goal is to minimize the poverty rate, the story is a bit more complicated.
For spending levels below $1 trillion, children should receive more than adults; for spending levels above $2 trillion, children should receive less; for spending levels in between, it varies.
Because many people have incomes just below or above their poverty threshold, the poverty rate responds to transfer policy in a volatile way.&lt;/p&gt;

&lt;p&gt;Finally, we examined the effect of UBI design on the  poverty gap, the summation of the distance poor families are from their poverty threshold.
The 2019 poverty gap is $153 billion.
To optimize its reduction, adults should receive more than children at every level above $150 billion in new spending.
With $2 trillion in funding, the poverty gap could be reduced to $45 billion by sending every adult $628 per month and parents $114 per month per child.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
summary = pd.read_csv(
    &quot;https://github.com/ngpsu22/blog/raw/master/children_share_funding_summary%20(4).csv.gz&quot;,
    compression=&quot;gzip&quot;,
)

optimal_poverty_gap = summary.sort_values(&quot;poverty_gap&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;first&quot;
)
# Drop rows where funding level is 0
optimal_poverty_gap = optimal_poverty_gap.drop(
    optimal_poverty_gap[optimal_poverty_gap.funding_billions == 0].index
)

optimal_poverty_rate = summary.sort_values(&quot;poverty_rate&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;first&quot;
)
# Drop rows where funding level is 0
optimal_poverty_rate = optimal_poverty_rate.drop(
    optimal_poverty_rate[optimal_poverty_rate.funding_billions == 0].index
)

optimal_inequality = summary.sort_values(&quot;gini&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;first&quot;
)
# Drop rows where funding level is 0
optimal_inequality = optimal_inequality.drop(
    optimal_inequality[optimal_inequality.funding_billions == 0].index
)

optimal_winners = summary.sort_values(&quot;percent_better_off&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;last&quot;
)
optimal_winners = optimal_winners.drop(
    optimal_winners[optimal_winners.funding_billions == 0].index
)

# Define adult population size, as determined in data preprocessing
adult_pop = 252117111.14000002
# Define child population size
child_pop = 73151070.56999998
# Calculate total population
pop = child_pop + adult_pop

# Create figure
fig = px.line()

# Add inequality trace
fig.add_trace(
    go.Scatter(
        x=optimal_inequality[&quot;funding_billions&quot;],
        y=optimal_inequality[&quot;child_percent_funding&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Gini index&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_inequality[&quot;monthly_child_ubi&quot;],
                optimal_inequality[&quot;monthly_adult_ubi&quot;],
                optimal_inequality[&quot;gini&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;i&gt;Children's share of spending&lt;/i&gt;: %{y:.0f}%&lt;br /&gt;&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            &quot;&lt;br /&gt;&lt;b&gt;Gini index &lt;/b&gt;: %{customdata[2]: .3f}&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#499167&quot;),
    )
)

# Add poverty gap trace
fig.add_trace(
    go.Scatter(
        x=optimal_poverty_gap[&quot;funding_billions&quot;],
        y=optimal_poverty_gap[&quot;child_percent_funding&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty gap&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_gap[&quot;monthly_child_ubi&quot;],
                optimal_poverty_gap[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_gap[&quot;poverty_gap&quot;] / 1e9,
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;i&gt;Children's share of spending&lt;/i&gt;: %{y:.0f}%&lt;br /&gt;&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            &quot;&lt;br /&gt;&lt;b&gt;Poverty gap &lt;/b&gt;: $%{customdata[2]: .0f} billion&lt;br /&gt;&quot;
        ),
        line=dict(color=DARK_BLUE),
    )
)

# Add poverty gap trace
fig.add_trace(
    go.Scatter(
        x=optimal_poverty_rate[&quot;funding_billions&quot;],
        y=optimal_poverty_rate[&quot;child_percent_funding&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty rate&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_rate[&quot;monthly_child_ubi&quot;],
                optimal_poverty_rate[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_rate[&quot;poverty_rate&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;i&gt;Children's share of spending&lt;/i&gt;: %{y:.0f}%&lt;br /&gt;&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            &quot;&lt;br /&gt;&lt;b&gt;Poverty rate &lt;/b&gt;: %{customdata[2]: .0f}%&lt;br /&gt;&quot;
        ),
        line=dict(color=LIGHT_BLUE),
    )
)


ratio = (child_pop / pop) * 100

fig.add_shape(
    type=&quot;line&quot;, line=dict(dash=&quot;dot&quot;, color=GRAY), x0=-1, x1=3000, y0=ratio, y1=ratio
)

# plot line where adult benefit is same size as child benefit
fig.add_annotation(
    text=&quot;Adult UBI = Child UBI&quot;,
    xref=&quot;paper&quot;,
    yref=&quot;paper&quot;,
    x=0.98,
    y=0.22,
    showarrow=False,
    font=dict(color=GRAY, size=12),
)

fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Funding in billions&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;B&quot;,
    tickprefix=&quot;$&quot;,
    range=[0, 3050],
)

fig.update_yaxes(
    title_text=&quot;Children's share of UBI spending&quot;,
    ticksuffix=&quot;%&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    range=[0, 105],
)

fig.update_layout(
    title_text=&quot;Optimal share of UBI spending on children by optimization criterion&quot;,
    hoverlabel_align=&quot;right&quot;,
    margin_b=90,
    legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.7),
    font=dict(family=&quot;Roboto&quot;),
    plot_bgcolor=&quot;white&quot;,
    height=600,
    width=1000,
    hovermode=&quot;x&quot;,
)

fig.add_layout_image(
    dict(
        source=&quot;https://raw.githubusercontent.com/UBICenter/ubicenter.org/master/assets/images/logos/wide-blue.jpg&quot;,
        # See https://github.com/plotly/plotly.py/issues/2975.
        # source=&quot;../_static/logos/wide-blue.jpg&quot;,
        xref=&quot;paper&quot;,
        yref=&quot;paper&quot;,
        x=1,
        y=-0.15,
        sizex=0.12,
        sizey=0.12,
        xanchor=&quot;right&quot;,
        yanchor=&quot;bottom&quot;,
    )
)

fig.update_traces(mode=&quot;markers+lines&quot;,)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;p&gt;The next chart shows the monthly amount given to children and adults under each optimization (you can hover over points in the prior chart to view this information as well).
Because the poverty gap is less volatile to changes at the margin, the UBI amounts increases are nearly linear. At the highest level of spending in our model, $3 trillion, adults would receive $942 per month and children would receive $171 while optimizing for poverty gap reduction.
Poverty rate amounts are more erratic, while inequality-minimizing amounts are roughly linear with a kink at the point where optimal adult amounts exceed $0.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Create UBI amount figure
fig = px.line()

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_gap[&quot;funding_billions&quot;],
        y=optimal_poverty_gap[&quot;monthly_child_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty gap - child&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_gap[&quot;monthly_child_ubi&quot;],
                optimal_poverty_gap[&quot;poverty_gap&quot;] / 1e9,
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty gap &lt;/b&gt;: $%{customdata[1]: .0f} billion&lt;br /&gt;&quot;
        ),
        line=dict(color=DARK_BLUE),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_gap[&quot;funding_billions&quot;],
        y=optimal_poverty_gap[&quot;monthly_adult_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty gap - adult&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_gap[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_gap[&quot;poverty_gap&quot;] / 1e9,
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Adult UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty gap &lt;/b&gt;: %{customdata[1]: .0f} billion&quot;
        ),
        line=dict(color=LIGHT_BLUE),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_rate[&quot;funding_billions&quot;],
        y=optimal_poverty_rate[&quot;monthly_child_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty rate - child&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_rate[&quot;monthly_child_ubi&quot;],
                optimal_poverty_rate[&quot;poverty_rate&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty rate &lt;/b&gt;: %{customdata[1]: .0f}%&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#484848&quot;),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_rate[&quot;funding_billions&quot;],
        y=optimal_poverty_rate[&quot;monthly_adult_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty rate - adult&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_rate[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_rate[&quot;poverty_rate&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Adult UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty rate &lt;/b&gt;: %{customdata[1]: .0f}%&quot;
        ),
        line=dict(color=GRAY),
    )
)


fig.add_trace(
    go.Scatter(
        x=optimal_inequality[&quot;funding_billions&quot;],
        y=optimal_inequality[&quot;monthly_child_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Inequality - child&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (optimal_inequality[&quot;monthly_child_ubi&quot;], optimal_inequality[&quot;gini&quot;]),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Gini &lt;/b&gt;: %{customdata[1]: .3f}&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#499167&quot;),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_inequality[&quot;funding_billions&quot;],
        y=optimal_inequality[&quot;monthly_adult_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Inequality - adult&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (optimal_inequality[&quot;monthly_adult_ubi&quot;], optimal_inequality[&quot;gini&quot;]),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Adult UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Gini &lt;/b&gt;: %{customdata[1]: .3f}&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#5FDD9D&quot;),
    )
)

fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Funding in billions&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;B&quot;,
    tickprefix=&quot;$&quot;,
    range=[0, 3050],
)

fig.update_yaxes(
    title_text=&quot;Monthly UBI amount&quot;,
    tickprefix=&quot;$&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
)

fig.update_xaxes(title_font=dict(size=14, color=&quot;black&quot;))
fig.update_yaxes(title_font=dict(size=14, color=&quot;black&quot;))
fig.update_layout(
    title_text=&quot;UBI amounts for each optimization&quot;,
    hoverlabel_align=&quot;right&quot;,
    margin_b=90,
    legend=dict(yanchor=&quot;top&quot;, y=1, xanchor=&quot;left&quot;, x=1.03),
    font=dict(family=&quot;Roboto&quot;),
    plot_bgcolor=&quot;white&quot;,
    height=600,
    width=1000,
    hovermode=&quot;x&quot;,
)

fig.update_traces(mode=&quot;markers+lines&quot;)

hide_line = [
    &quot;Poverty rate - child&quot;,
    &quot;Poverty rate - adult&quot;,
    &quot;Inequality - child&quot;,
    &quot;Inequality - adult&quot;,
]
fig.for_each_trace(
    lambda trace: trace.update(visible=&quot;legendonly&quot;) if trace.name in hide_line else ()
)

fig.add_layout_image(
    dict(
        source=&quot;https://raw.githubusercontent.com/UBICenter/ubicenter.org/master/assets/images/logos/wide-blue.jpg&quot;,
        # See https://github.com/plotly/plotly.py/issues/2975.
        # source=&quot;../_static/logos/wide-blue.jpg&quot;,
        xref=&quot;paper&quot;,
        yref=&quot;paper&quot;,
        x=1,
        y=-0.15,
        sizex=0.12,
        sizey=0.12,
        xanchor=&quot;right&quot;,
        yanchor=&quot;bottom&quot;,
    )
)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;p&gt;Our research shows that different policy objectives and funding levels may lead to starkly different amounts of cash transfer funding going towards children.
Each optimization, however, called for children to receive a nonzero share of UBI spending, and often a larger monthly amount than adults, especially with small budgets and when minimizing inequality.
These results underline the importance of including children in UBI conversations and policy analysis.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;will&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">At least some, but it depends on the measurement.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">The effect of child allowances across US states</title>
      <link href="/child-allowance-state-simulation" rel="alternate" type="text/html" title="The effect of child allowances across US states" />
      <published>2020-11-25T00:00:00+00:00</published>
      <updated>2020-11-25T00:00:00+00:00</updated>
      <id>/child-allowance-state-simulation</id>
      <content type="html" xml:base="/child-allowance-state-simulation">&lt;p&gt;Poverty has a lasting impact on children.  Growing up in poverty increases &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;stress&lt;/a&gt; and &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;incarceration rates&lt;/a&gt; and decreases &lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S1876285915003836&quot;&gt;educational&lt;/a&gt; and &lt;a href=&quot;https://www.aeaweb.org/articles?id=10.1257/app.2.1.86&quot;&gt;health&lt;/a&gt; outcomes.  These negative consequences not only impact the nation’s poor, but the entire economy as well–child poverty shrinks GDP by more than &lt;a href=&quot;https://www.nap.edu/read/25246/chapter/1&quot;&gt;$1 trillion annually&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Research has shown that giving money to families with children, as most developed countries do, can reduce each of these issues.  Programs that provide cash to families with children are called a &lt;em&gt;child allowance&lt;/em&gt;, and are typically paid out on a monthly basis.&lt;/p&gt;

&lt;p&gt;Here you can explore the impact of a potential child allowance of various amounts in each state.
We show impacts across three funding mechanisms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Federal tax&lt;/strong&gt; as a flat rate on taxable income. For each child allowance amount the total cost is calculated by multiplying the annual child allowance by the total number of children.  To calculate the revenue neutral tax rate, the total cost is divided by the nation’s total taxable income.  For example, a child allowance of $100 per month would cost about $88 billion annually and require a new flat tax of 1.1 percent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;State tax&lt;/strong&gt; as a flat rate on taxable income. The state tax is calculated in the same manner as the federal tax, but at the state level. This shows how states can fund their own child allowances. Because states vary in child population and income, different states have different tax rates. A $100 monthly child allowance in DC is offset by a 0.5 percent tax on taxable income while the same amount requires a 1.3 percent tax in Alabama.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No funding&lt;/strong&gt; does not impose any new taxes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These static analyses (they do not consider labor supply effects) are based on data from the Current Population Survey March Supplement representing income from 2017 to 2019, and preserve existing benefits such as the Child Tax Credit.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Imports.
import pandas as pd
import numpy as np
import math
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import copy

# Load data.
summary = pd.read_csv('https://github.com/ngpsu22/Child_Allowance_States/raw/main/poverty_gini_tax_child_allowance')

deciles = pd.read_csv('data/deciles.csv')

deciles.funding = deciles.funding.map({'deficit': 'No funding',
                                       'fed': 'Federal tax',
                                       'state': 'State tax'})

# General configs.
LABELS = {'monthly_ca': 'Monthly child allowance',
          'decile': 'Decile',
          'net_chg': 'Net change',
          'pct_chg': 'Net change',
          'child_allowance':'Monthly child allowance',
          'code': 'State',
          'state': 'State',
          'fed_tax_rate': 'Tax rate',
          'state_tax_rate': 'Tax rate',
          'non_funded_poverty_rate': 'Poverty rate',
          'fed_poverty_rate': 'Poverty rate',
          'state_poverty_rate': 'Poverty rate',
          'non_funded_gini': 'Gini index',
          'fed_gini': 'Gini index',
          'state_gini': 'Gini index'}

CONFIG = {'displayModeBar': False}

# Preprocess data.
summary.drop('Unnamed: 0', 1, inplace = True)
tax = summary[(summary.race == 'All') &amp;amp; (summary.age_group == 'all')]

state_names = tax.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
default_state = 'US'
state_dict = summary[['code', 'state']].set_index('code').to_dict()['state']

# Colors from https://material.io/design/color/the-color-system.html
DARK_BLUE = '#1565C0'
LIGHT_BLUE = '#42A5F5'
GRAY = '#BDBDBD'
GRAY_SHADOW = '#EEEEEE'
COLOR_MAP = {
    'Federal tax rate': DARK_BLUE,
    'State tax rate': LIGHT_BLUE,
    'Federal tax': DARK_BLUE,
    'State tax': LIGHT_BLUE,
    'No funding': GRAY,
    'No funding, out of poverty': GRAY_SHADOW
}

# data labels
REFORM = {'state_tax_rate': 'State tax rate', 
          'fed_tax_rate': 'Federal tax rate'}

# reformat data
data_list = []
for state in state_names:
    state_data = tax[tax.state == state]
    state_list = []
    for reform in REFORM:
        state_list.append(state_data[reform])
    data_list.append(state_list)

# generate first graph
data_columns = list(REFORM.keys())
data = pd.DataFrame(data_list, columns = data_columns)
data['State'] = state_names
data = data.set_index('State')

def getDataList(state):
    data_list = []
    for dc in data_columns:
        data_list.append(data.loc[state][dc])
    return data_list

# initialize figure
fig = go.Figure()

# add traces
x = tax.child_allowance.unique()
for reform in REFORM:
    fig.add_trace(go.Scatter(
        x=x, 
        y=data[reform][default_state],
        name=REFORM[reform],
        marker = dict(color = COLOR_MAP[REFORM[reform]]),
        hoverlabel = dict(namelength = -1)
#         hovertemplate=
#                 REFORM[reform] + ': %{y}' + 
#                 '&lt;extra&gt;&lt;/extra&gt;',
    ))

# generate buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'y': getDataList(state), 
                            'visible': ['legendonly' if state == 'US' 
                                        else True, True]}
                          ]}
    buttons.append(new_button)
    
# construct menus
updatemenus = [{'buttons': buttons,
                'direction': 'down',
                'showactive': True,
                'pad':{'l': 10, 'r': 25},
               }]

# update layout with buttons, and show the figure
fig.update_layout(updatemenus=updatemenus)

fig.update_xaxes(title_text='Monthly child allowance')

tax_values = tax.state_tax_rate.tolist() + tax.fed_tax_rate.tolist() 
ymin = math.floor(min(tax_values) * 100) / 100 - 0.1
ymax = math.ceil(max(tax_values) * 100) / 100
fig.update_yaxes(title_text='Tax rate on taxable income', range=[ymin, ymax])

fig.update_layout(height=600, 
                  margin=dict(l=0, r=0, t=80, b=0),
                  yaxis_ticksuffix='%',
                  font=dict(family='Roboto'),
                  hovermode='x', 
                  xaxis_tickprefix='$',
                  xaxis_ticksuffix='',
                  plot_bgcolor='white',
                  legend_title_text='',
                  title={
                    'text': 'Income tax required to fund child allowances',
                    'y':0.95,
                    'x':0.01,
                    'xanchor': 'left',
                    'yanchor': 'top'},
                  title_font_size=20,
                 )

fig.update_layout(hovermode=&quot;x unified&quot;)

# hide state tax rate for US only
hide_line = ['State tax rate']
fig.for_each_trace(lambda trace: trace.update(visible=&quot;legendonly&quot;)
                   if trace.name in hide_line else ())

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;distributional-effects&quot;&gt;Distributional effects&lt;/h2&gt;

&lt;p&gt;While the new tax would hit most Americans, save the very poorest who earn less than the standard deduction, the overall distributional consequences would be positive.
For instance, the bottom decile would see their average annual resources rise by about $3,700 per person with a federal $300 per month child allowance, while the top 10 percent would see their average resources per person fall by about double, $6,400.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# make chart symmetric with boundary at the maximum.
boundary = deciles.net_chg.agg([min, max]).abs().max()

# initial data set-up 
x = deciles.decile.unique()
ca_amts = deciles.monthly_ca.unique()
state_names = deciles.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
fundings = ['Federal tax', 'State tax', 'No funding']

# get list of bar colors
colors = [COLOR_MAP[i] for i in fundings]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Average net change to household income by decile', 
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'title': 'Decile of resources per person', 
    'dtick': 1,
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Average annual net change per SPM unit', 
    'tickprefix': '$',
    'range': [-boundary, boundary]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 20,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = deciles[(deciles.state == state) &amp;amp;
                       (deciles.funding == funding)].round()
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.monthly_ca == ca].net_chg)
    return frames

# create dataframe of booleans to determine trace visibility
# separating funding mechanisms is currently redundant but can 
#    in theory be used to add another dropdown menu
n = len(state_names) * len(fundings)
frames_list = []
count = 0
visible = []
for state in state_names:
    vis_list = []
    for funding in fundings:
        frames_list.append(make_frames(state, funding))
        v = np.array([False] * n)
        v[count] = True
        vis_list.append(v)
        count += 1
    visible.append(vis_list)
visible = pd.DataFrame(visible, columns = fundings, index = state_names)

# add traces to figure dictionary
for i in range(n):
    data_dict = {
        'x': x,
        'y': frames_list[i]['500'],
        'type': 'bar',
        # Only show the Federal tax line (index 0) when first loading chart.
        'visible': True if i == 0 else ('legendonly' if i &amp;lt; 3 else False),
        'name': fundings[i % 3],
        'marker_color':  colors[i % 3],
        'hovertemplate': 
                '&lt;b&gt;' + fundings[i % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Change in resources: %{y}&lt;br /&gt;' + 
                '&lt;extra&gt;&lt;/extra&gt;'
    }
    fig_dict['data'].append(data_dict)

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    for f in frames_list:
        data_list.append({'y': f[str(ca)], 'type': 'bar'})
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[fundings[0]][state] | 
                                        visible[fundings[1]][state] |
                                        visible[fundings[2]][state])}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
               }

# add slider and button menus
fig.update_layout(updatemenus=[slider_menu, updatemenus],
                  title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;This $300-per-month child allowance would raise the bottom decile’s income by 33 percent, while lowering the top decile’s income by 4 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# make chart symmetric with boundary at the maximum.
boundary = deciles.pct_chg.agg([min, max]).abs().max()

# initial data set-up 
x = deciles.decile.unique()
ca_amts = deciles.monthly_ca.unique()
state_names = deciles.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
fundings = ['Federal tax', 'State tax', 'No funding']

# get list of bar colors
colors = [COLOR_MAP[i] for i in fundings]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Average percent change to household income by decile', 
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'title': 'Decile of resources per person', 
    'dtick': 1,
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Average percent change to SPM unit resources', 
    'ticksuffix': '%',
    'range': [-boundary, boundary]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 20,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = deciles[(deciles.state == state) &amp;amp;
                       (deciles.funding == funding)].round()
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.monthly_ca == ca].pct_chg)
    return frames

# create dataframe of booleans to determine trace visibility
# separating funding mechanisms is currently redundant but can 
#    in theory be used to add another dropdown menu
n = len(state_names) * len(fundings)
frames_list = []
count = 0
visible = []
for state in state_names:
    vis_list = []
    for funding in fundings:
        frames_list.append(make_frames(state, funding))
        v = np.array([False] * n)
        v[count] = True
        vis_list.append(v)
        count += 1
    visible.append(vis_list)
visible = pd.DataFrame(visible, columns = fundings, index = state_names)

# add traces to figure dictionary
for i in range(n):
    data_dict = {
        'x': x,
        'y': frames_list[i]['500'],
        'type': 'bar',
        # Only show the Federal tax line (index 0) when first loading chart.
        'visible': True if i == 0 else ('legendonly' if i &amp;lt; 3 else False),
        'name': fundings[i % 3],
        'marker_color':  colors[i % 3],
        'hovertemplate': 
                '&lt;b&gt;' + fundings[i % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Change in resources: %{y}&lt;br /&gt;' + 
                '&lt;extra&gt;&lt;/extra&gt;'
    }
    fig_dict['data'].append(data_dict)

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    for f in frames_list:
        data_list.append({'y': f[str(ca)], 'type': 'bar'})
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[fundings[0]][state] | 
                                        visible[fundings[1]][state] |
                                        visible[fundings[2]][state])}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
               }

# add slider and button menus
fig.update_layout(updatemenus=[slider_menu, updatemenus],
                  title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;inequality&quot;&gt;Inequality&lt;/h2&gt;

&lt;p&gt;The progressive benefits by decile demonstrate that child allowances would reduce inequality.
Measures of inequality can formalize this result.
For example, the Gini index lies between 0 and 1, with 0 indicating that everyone has the exact same income, and 1 indicating that one person possesses all the income.&lt;/p&gt;

&lt;p&gt;Across funding strategies, child allowances reduce inequality as measured by the Gini index, with larger child allowances producing larger inequality reductions.
Nationally, a $500 monthly child allowance shrinks the Gini index nine percent, from 0.446 to 0.406.
While states vary in their levels of current inequality, a $200 monthly child allowance cuts the measure of inequality consistently between 4 and 5 percent across them.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data labels
GINI = {'fed_gini': 'Federal tax',
        'state_gini': 'State tax',
        'non_funded_gini': 'No funding'}

# reformat data
data_list = []
for state in state_names:
    state_data = tax[tax.state == state]
    state_list = []
    for gini in GINI:
        state_list.append(state_data[gini])
    data_list.append(state_list)

data_columns = list(GINI.keys())
data = pd.DataFrame(data_list, columns = data_columns)
data['State'] = state_names
data = data.set_index('State')

def getDataList(state):
    data_list = []
    for dc in data_columns:
        data_list.append(data.loc[state][dc])
    return data_list

# initialize figure
fig = go.Figure()

# add traces
x = tax.child_allowance.unique()
for gini in GINI:
    fig.add_trace(go.Scatter(
        x=x, 
        y=tax[tax.state == default_state][gini],
        name=GINI[gini],
        marker = dict(color = COLOR_MAP[GINI[gini]]),
#         hovertemplate=
#                 GINI[gini] + ': %{y}' + 
#                 '&lt;extra&gt;&lt;/extra&gt;'
    ))

# generate buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'y': getDataList(state),
                           'visible': [True,
                                       'legendonly' if state == 'US' else True,
                                       True]},
                          ]}
    buttons.append(new_button)
    
# construct menus
updatemenus = [{'buttons': buttons,
                'direction': 'down',
                'showactive': True,
                'pad':{'l': 10, 'r': 25},
               }]

# update layout with buttons, and show the figure
fig.update_layout(updatemenus=updatemenus)

fig.update_xaxes(title_text='Monthly child allowance')

gini_values = tax.non_funded_gini.tolist() + tax.fed_gini.tolist() + tax.state_gini.tolist()
ymin = math.floor(min(gini_values) * 100) / 100
ymax = math.ceil(max(gini_values) * 100) / 100
fig.update_yaxes(title_text='Gini index of per-capita income, 2017-2019',
                 range=[ymin, ymax])

fig.update_layout(height=600, 
                  margin=dict(l=0, r=0, t=80, b=0),
                  font=dict(family='Roboto'),
                  hovermode='x', 
                  xaxis_tickprefix='$',
                  xaxis_ticksuffix='',
                  plot_bgcolor='white',
                  legend_title_text='',
                  title={
                    'text': 'Income inequality by child allowance amount',
                    'y':0.95,
                    'x':0.01,
                    'xanchor': 'left',
                    'yanchor': 'top'},
                  title_font_size=20,
                 )

fig.update_layout(hovermode=&quot;x unified&quot;)

# hide state tax rate for US only
hide_line = ['State tax']
fig.for_each_trace(lambda trace: trace.update(visible=&quot;legendonly&quot;)
                   if trace.name in hide_line else ())

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;poverty&quot;&gt;Poverty&lt;/h2&gt;
&lt;p&gt;A child allowance can also substantially cut poverty.  In this example, a person is said to be in poverty if their household’s total post tax and transfer income is less than their poverty threshold.
Poverty thresholds are determined by the Census Bureau’s Supplemental Poverty Measure (SPM), which considers a medley of factors including household size, housing status, and local housing costs.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button5&quot; onclick=&quot;f5()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_5&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data labels
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

ca_amts = summary.child_allowance.unique()
child_poverty = summary[(summary['age_group'] == 'child') &amp;amp;
                        (summary['race'] == 'All')]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=10)
}
fig_dict['layout']['title'] = {
    'text': ('Child poverty by state and child allowance amount'),
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}

# add slider specifications
slidermenu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': True,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}
    
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# generate frames
frames = []
locations = child_poverty.code
zero_poverty = child_poverty[child_poverty.child_allowance == 0]
for ca in ca_amts:
    data_list = []
    ca_data = child_poverty[child_poverty.child_allowance == ca]
    for funding in FUNDING:
        data_list.append({
            'hovertemplate': 
                '&lt;b&gt;%{customdata[1]}&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{z}%&lt;br /&gt;' + 
                'Poverty reduction: %{customdata[0]}%' +
                '&lt;extra&gt;&lt;/extra&gt;',
            'locationmode': 'USA-states',
            'locations': child_poverty.code.unique(),
            'z': ca_data[funding].tolist(),
            'type': 'choropleth',
            'customdata': list(map(lambda x, y, z: (round(100 * (1 - y / x)), state_dict[z]),
                                   zero_poverty[funding], ca_data[funding], state_dict))
        })
    
    frame = {'data': data_list, 'name': str(ca), 'traces': [0,1,2]}
    frames.append(frame)
    
# add frames to figure dictionary
fig_dict['frames'] = frames

# add traces to figure dictionary
for i in (range(len(FUNDING))):
    fig_dict['data'].append(frames[0]['data'][0])

# generate figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for funding in FUNDING:
    new_button = {'method': 'update',
                  'label': FUNDING[funding],
                  'args': [{'visible': [f == funding for f in FUNDING.keys()]}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenu = {'buttons': buttons,
              'direction': 'down',
              'showactive': True,
              'pad':{&quot;r&quot;: 10, 't': 20, 'l': 50},
              'xanchor': 'left',
              'yanchor': 'top',
              'x': 0,
              'y': 1.2
             }

# add slider, dropdown menu, and set geo scope
fig.update_layout(
    geo_scope='usa', # limite map scope to USA
    sliders=[sliders_dict],
    updatemenus=[slidermenu, updatemenu]
)

# update visual attributes
fig.update_traces(showscale=False, colorscale='Reds', zmin=0, zmax=22)
fig.update_layout(
    hoverlabel=dict(
        bgcolor=&quot;white&quot;,
        font=dict(family='Roboto')
    ),
    title_font_size=20,
)
fig.update(layout_showlegend=False)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f5() {
  var x = document.getElementById(&quot;asset_code_5&quot;);
  var b = document.getElementById(&quot;button5&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset5&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-5.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset5&quot;&gt;&lt;/div&gt;

&lt;p&gt;A child allowance of $300 per month, funded by a federal income tax, would cut US child poverty by 52 percent, and also cut adult poverty by 13 percent.
Overall poverty would fall 22 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button6&quot; onclick=&quot;f6()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_6&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

# initial data set-up
age = summary[summary['race'] == 'All'].copy(deep=True)
age.age_group = age.age_group.str.capitalize()
x = ['Child', 'Adult', 'All']
ca_amts = age.child_allowance.unique()
state_names = age.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Poverty by age and child allowance amount',
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'SPM poverty rate, 2017-2019',
    'ticksuffix': '%',
    'range': [0, 25]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True, 
                            &quot;mode&quot;: &quot;immediate&quot;,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = age[(age.state == state)]
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.child_allowance == ca].set_index(
            'age_group').loc[x][funding])
    return frames

# create dataframe of booleans to determine trace visibility
n = len(state_names) * len(FUNDING)
frames_list = []
count = 0
visible = {}
for state in state_names:
    v = [False] * n
    for funding in FUNDING:
        frames_list.append(make_frames(state, funding))
        v[count] = True
        count += 1
    visible[state] = v + v
v = [False] * n
v[0] = True
v[1] = 'legendonly'
v[2] = 'legendonly'
visible['US'] = v + v

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f['0'], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count, 
            'showlegend': False,
            'legendgroup': count,
            'marker_color': GRAY_SHADOW,
            'name': 'No child allowance',
            'hovertemplate': 
                'Current poverty rate: %{y}' + 
                '&lt;extra&gt;&lt;/extra&gt;'
        })
        count += 1
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f[str(ca)], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count,
            'legendgroup': count,
            'name': list(FUNDING.values())[count % 3],
            'marker_color': COLOR_MAP[list(FUNDING.values())[count % 3]],
            'hovertemplate': 
                '&lt;b&gt;' + list(FUNDING.values())[count % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Poverty rate: %{y}&lt;br /&gt;' + 
                'Poverty reduction: %{customdata}%'
                '&lt;extra&gt;&lt;/extra&gt;',
            'customdata': list(map(lambda x, y: (round(100 * (1 - y / x))),
                                   f['0'], f[str(ca)]))
        })
        count += 1
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n*2))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)
for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][n + i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[state])},
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
              }

# add slider and button menus
fig.update_layout(
    updatemenus=[slider_menu, updatemenus],
    hoverlabel=dict(
        font=dict(family='Roboto')
    ),
    title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f6() {
  var x = document.getElementById(&quot;asset_code_6&quot;);
  var b = document.getElementById(&quot;button6&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset6&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-6.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset6&quot;&gt;&lt;/div&gt;

&lt;p&gt;That same $300-per-month federally-funded child allowance would cut child poverty fairly consistently across races: 51 percent among White children and 54 percent among Black children.
But because Black children are currently about twice as likely to be in poverty, it also cuts the percentage-point racial gaps in half.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button7&quot; onclick=&quot;f7()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_7&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

# initial data set-up 
race = summary[summary['age_group'] == 'child']
x = ['Black', 'White', 'Other', 'All']
ca_amts = race.child_allowance.unique()
state_names = race.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Child poverty by race and child allowance amount',
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Child SPM poverty rate, 2017-2019',
    'ticksuffix': '%',
    'range': [0, 25]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True, 
                            &quot;mode&quot;: &quot;immediate&quot;,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = race[(race.state == state)]
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.child_allowance == ca].set_index('race').loc[x][funding])
    return frames

# create dataframe of booleans to determine trace visibility
n = len(state_names) * len(FUNDING)
frames_list = []
count = 0
visible = {}
for state in state_names:
    v = [False] * n
    for funding in FUNDING:
        frames_list.append(make_frames(state, funding))
        v[count] = True
        count += 1
    visible[state] = v + v
v = [False] * n
v[0] = True
v[1] = 'legendonly'
v[2] = 'legendonly'
visible['US'] = v + v

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f['0'], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count, 
            'showlegend': False,
            'legendgroup': count,
            'marker_color': GRAY_SHADOW,
            'name': 'No child allowance',
            'hovertemplate': 
                'Current poverty rate: %{y}' + 
                '&lt;extra&gt;&lt;/extra&gt;'
        })
        count += 1
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f[str(ca)], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count,
            'legendgroup': count,
            'name': list(FUNDING.values())[count % 3],
            'marker_color': COLOR_MAP[list(FUNDING.values())[count % 3]],
            'hovertemplate': 
                '&lt;b&gt;' + list(FUNDING.values())[count % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{y}&lt;br /&gt;' + 
                'Poverty reduction: %{customdata}%'
                '&lt;extra&gt;&lt;/extra&gt;',
            'customdata': list(map(lambda x, y: (round(100 * (1 - y / x))),
                                   f['0'], f[str(ca)]))
        })
        count += 1
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n*2))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)
for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][n + i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[state])}]
                 }
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
              }

# add slider and button menus
fig.update_layout(
    updatemenus=[slider_menu, updatemenus],
    hoverlabel=dict(
        font=dict(family='Roboto')
    ),
    title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f7() {
  var x = document.getElementById(&quot;asset_code_7&quot;);
  var b = document.getElementById(&quot;button7&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset7&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-7.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset7&quot;&gt;&lt;/div&gt;

&lt;p&gt;Beyond reducing child poverty, child allowances would decrease adult poverty and abate inequality.
These effects are consistent across states, races, and the funding mechanisms.&lt;/p&gt;

&lt;p&gt;Read on to our &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;Empirical studies&lt;/a&gt; page for more research on the (often causal) links between child poverty and outcomes like health, education, and income.
For more information on how a child allowance would compare to existing policies like the Child Tax Credit, visit our &lt;a href=&quot;https://child-allowance.ubicenter.org/policies&quot;&gt;Policies&lt;/a&gt; page.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;matt&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">How different forms of cash grants to parents would affect poverty and inequality.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Our new child allowance project</title>
      <link href="/child-allowance-project" rel="alternate" type="text/html" title="Our new child allowance project" />
      <published>2020-11-25T00:00:00+00:00</published>
      <updated>2020-11-25T00:00:00+00:00</updated>
      <id>/child-allowance-project</id>
      <content type="html" xml:base="/child-allowance-project">&lt;p&gt;&lt;em&gt;See the full project at &lt;a href=&quot;https://child-allowance.ubicenter.org&quot;&gt;child-allowance.ubicenter.org&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1 in 7 children in the United States lives in poverty, &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;raising&lt;/a&gt; stress and crime rates, &lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S1876285915003836&quot;&gt;worsening&lt;/a&gt; educational outcomes, and &lt;a href=&quot;https://www.nap.edu/catalog/25246/a-roadmap-to-reducing-child-poverty&quot;&gt;shrinking&lt;/a&gt; the economy by up to $1 trillion annually. Research shows that giving money to families with children, as &lt;a href=&quot;https://www.vox.com/future-perfect/2019/3/6/18249290/child-poverty-american-family-act-sherrod-brown-michael-bennet&quot;&gt;most developed countries do&lt;/a&gt;, reduces each of these issues. A child allowance is a policy that gives families an equal amount for each child.&lt;/p&gt;

&lt;p&gt;This project examines child allowances through various lenses:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;2020-11-25-child-allowance-state-simulation&quot;&gt;&lt;strong&gt;Simulations&lt;/strong&gt;&lt;/a&gt; quantifying the effects of child allowance policies (deficit- and tax-funded) on poverty and inequality across US states.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;&lt;strong&gt;Research&lt;/strong&gt;&lt;/a&gt; on the effects of child allowances and similar policies on children, based on randomized controlled trials and other empirical techniques.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/policies&quot;&gt;&lt;strong&gt;Policy context&lt;/strong&gt;&lt;/a&gt; of existing US child benefits and child allowances in other countries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, this interactive map is one of several visualizations in our &lt;a href=&quot;2020-11-25-child-allowance-state-simulation&quot;&gt;simulations page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# TODO: Add tax reforms as a drop-down (mirrored from simulation.ipynb).

# Imports.
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Load data.
summary = pd.read_csv('https://github.com/ngpsu22/Child_Allowance_States/raw/main/poverty_gini_tax_child_allowance')

# General configs.
LABELS = {'monthly_ca': 'Monthly child allowance',
          'decile': 'Decile',
          'net_chg': 'Net change',
          'pct_chg': 'Net change',
          'child_allowance':'Monthly child allowance',
          'code': 'State',
          'state': 'State',
          'fed_tax_rate': 'Tax rate',
          'state_tax_rate': 'Tax rate',
          'non_funded_poverty_rate': 'Poverty rate',
          'fed_poverty_rate': 'Poverty rate',
          'state_poverty_rate': 'Poverty rate',
          'non_funded_gini': 'Gini index',
          'fed_gini': 'Gini index',
          'state_gini': 'Gini index'}

CONFIG = {'displayModeBar': False}

# Preprocess data.
summary.drop('Unnamed: 0', 1, inplace = True)
state_dict = summary[['code', 'state']].set_index('code').to_dict()['state']

# data labels
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

ca_amts = summary.child_allowance.unique()
child_poverty = summary[(summary['age_group'] == 'child') &amp;amp;
                        (summary['race'] == 'All')]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=10)
}
fig_dict['layout']['title'] = {
    'text': ('Child poverty by state and child allowance amount'),
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}

# add slider specifications
slidermenu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': True,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}
    
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# generate frames
frames = []
locations = child_poverty.code
zero_poverty = child_poverty[child_poverty.child_allowance == 0]
for ca in ca_amts:
    data_list = []
    ca_data = child_poverty[child_poverty.child_allowance == ca]
    for funding in FUNDING:
        data_list.append({
            'hovertemplate': 
                '&lt;b&gt;%{customdata[1]}&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{z}%&lt;br /&gt;' + 
                'Poverty reduction: %{customdata[0]}%' +
                '&lt;extra&gt;&lt;/extra&gt;',
            'locationmode': 'USA-states',
            'locations': child_poverty.code.unique(),
            'z': ca_data[funding].tolist(),
            'type': 'choropleth',
            'customdata': list(map(lambda x, y, z: (round(100 * (1 - y / x)), state_dict[z]),
                                   zero_poverty[funding], ca_data[funding], state_dict))
        })
    
    frame = {'data': data_list, 'name': str(ca), 'traces': [0,1,2]}
    frames.append(frame)
    
# add frames to figure dictionary
fig_dict['frames'] = frames

# add traces to figure dictionary
for i in (range(len(FUNDING))):
    fig_dict['data'].append(frames[0]['data'][0])

# generate figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for funding in FUNDING:
    new_button = {'method': 'update',
                  'label': FUNDING[funding],
                  'args': [{'visible': [f == funding for f in FUNDING.keys()]}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenu = {'buttons': buttons,
              'direction': 'down',
              'showactive': True,
              'pad':{&quot;r&quot;: 10, 't': 20, 'l': 50},
              'xanchor': 'left',
              'yanchor': 'top',
              'x': 0,
              'y': 1.2
             }

# add slider, dropdown menu, and set geo scope
fig.update_layout(
    geo_scope='usa', # limite map scope to USA
    sliders=[sliders_dict],
    updatemenus=[slidermenu, updatemenu]
)

# update visual attributes
fig.update_traces(showscale=False, colorscale='Reds', zmin=0, zmax=22)
fig.update_layout(
    hoverlabel=dict(
        bgcolor=&quot;white&quot;,
        font=dict(family='Roboto')
    ),
    title_font_size=20,
)
fig.update(layout_showlegend=False)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/index/2020-11-25-index-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;We also review the evidence around child allowances from the United States and Canada, and a special deep dive into research from sub-Saharan Africa, where randomized cash transfer rollouts produce particularly high-quality estimates. For example, cash transfer programs consistently reduced consumption poverty (below). See the &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;&lt;strong&gt;full paper&lt;/strong&gt;&lt;/a&gt; for evidence across other outcomes like education and health.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
pov = pd.DataFrame({
    &quot;effect_pp&quot;: [-2.1, -3.9, 3.8, -14.9, -8.3, -4.1, -0.5],
    &quot;baseline_pp&quot;: [93, 88, 68, 82, 44, 94, 92],
    &quot;stars&quot;: [2, 0, 0, 3, 1, 2, 0]
}, index=['Ghana LEAP', 'Kenya HSNP', 'Lesotho CGP', 'Malawi SCTP',
          'Uganda SAGE', 'Zambia CGP', 'Zimbabwe HSCT']
)
pov['pct_effect'] = 100 * pov.effect_pp / pov.baseline_pp
pov['significance'] = pov.stars.map({0: '&amp;gt;10%',
                                     1: '5-10%',
                                     2: '1-5%',
                                     3: '&amp;lt;1%'})
# Sort by stars for proper legend ordering.
pov.sort_values('stars', ascending=False, inplace=True)

DARK_BLUE = '#0D47A1'
BLUE = '#2196F3'
BARELY_BLUE = '#BBDEFB'
GRAY = '#E0E0E0'

fig = px.bar(pov, 'pct_effect', color='significance',
             labels={'pct_effect': 'Poverty change',
                     'index': 'Program',
                     'significance': 'Significance'},
             title='Poverty reductions across cash transfer RCTs in SSA',
             color_discrete_map={'&amp;gt;10%': GRAY,
                                 '5-10%': BARELY_BLUE,
                                 '1-5%': BLUE,
                                 '&amp;lt;1%': DARK_BLUE},
)

fig.update_layout(font=dict(family='Roboto'),
                  plot_bgcolor='white',
                  yaxis_title='Cash transfer program',
                  legend_title='Statistical significance',
                  xaxis_title='Percent change in poverty headcount rate',
                  xaxis_ticksuffix='%',
                  # Sort by effect size
                  # (since data is sorted by stars for legend order)
                  yaxis={'categoryorder':'total descending'},
                  title_font_size=20,
                 )

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/index/2020-11-25-index-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Finally, we consider the political state of child allowances, such as the &lt;a href=&quot;https://www.bennet.senate.gov/public/index.cfm/american-family-act&quot;&gt;American Family Act&lt;/a&gt;, which would ensure all low-income children in the US receive the full benefits of the Child Tax Credit, and how such a policy would align US child benefits with those from other developed countries.&lt;/p&gt;

&lt;p&gt;By efficiently reducing child poverty, child allowances provide kids with basic needs, improve access to opportunity, and invest in our future.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;john&quot;, &quot;matt&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">We're examining universal payments to parents across multiple angles.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">To minimize poverty, should UBI be provided for adults, children, or both?</title>
      <link href="/adult-child-ubi" rel="alternate" type="text/html" title="To minimize poverty, should UBI be provided for adults, children, or both?" />
      <published>2020-07-07T00:00:00+00:00</published>
      <updated>2020-07-07T00:00:00+00:00</updated>
      <id>/adult-child-ubi</id>
      <content type="html" xml:base="/adult-child-ubi">&lt;p&gt;While &lt;a href=&quot;https://fred.stlouisfed.org/series/A939RX0Q048SBEA&quot;&gt;US GDP per capita has more than doubled in the past 50 years&lt;/a&gt;, many Americans still remain in poverty. According to the Census Bureau’s 2018 Supplemental Poverty Measure (SPM), over 40 million Americans live below their SPM poverty threshold.&lt;/p&gt;

&lt;p&gt;Some &lt;a href=&quot;https://www.ubicenter.org/plans&quot;&gt;large guaranteed-income programs have been shown to nearly eliminate poverty&lt;/a&gt;, but spending constraints can change how program design affects different outcomes. This paper shows the impact of new universal cash programs on poverty alleviation under varying levels of spending.&lt;/p&gt;

&lt;p&gt;I examine the poverty rate impacts of three different basic income programs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adult UBI - provides monthly stipends only to adults.&lt;/li&gt;
  &lt;li&gt;Child Allowance - provides families monthly stipends based only on how many children are in their household.&lt;/li&gt;
  &lt;li&gt;All UBI - provides an equal monthly stipend to all Americans regardless of age (parents would receive it on behalf of their children).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two years ago, Matt Bruenig produced a similar  &lt;a href=&quot;https://www.peoplespolicyproject.org/2018/11/29/a-child-allowance-would-be-very-effective-at-poverty-reduction/&quot;&gt;paper&lt;/a&gt; using 2017 data in which he compared the same three programs and their impact on the poverty rate up to $500 billion in new spending. Bruenig found that at all levels of spending up to $500 billion, a Child Allowance was the most effective program at reducing poverty. This paper considers new spending up to $1 trillion with updated data from 2018.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I used data from the Census Bureau’s 2019 Annual Social and Economic Supplement (ASEC), which uses data collected in 2018. The ASEC survey contains over 180,000 Americans from more than 75,000 households. Each respondent is assigned a sample weight by the Census Bureau so that models can provide consistent national-level estimates.&lt;/p&gt;

&lt;p&gt;The Supplemental Poverty Measure classifies respondents’ poverty status by comparing their total family income (post tax and transfers) to their family poverty threshold. The Census Bureau defines poverty thresholds based on family size and costs of necessities.&lt;/p&gt;

&lt;p&gt;In 2018, 12.7 percent of Americans were in poverty, including 13.6 percent of children and 12.5 percent of adults.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;A Child Allowance reduces overall poverty more than the other two designs, for spending up to $500 billion; this aligns with Bruenig’s results. However, at levels beyond $500 billion, a UBI that includes everyone cuts overall poverty more.&lt;/p&gt;

&lt;p&gt;Spending $100 billion on a Child Allowance would equate to monthly stipends of $114 per child and lift 4.5 million Americans (1.3 million children and 3.2 million adults) out of poverty. $500 billion on either a Child Allowance or All UBI would lift 12 million Americans out of poverty. Spending $1 trillion on an All UBI would equate to monthly checks of $258 per American and lift over 22 million people out of poverty.&lt;/p&gt;

&lt;p&gt;The interactive graph below shows the poverty impacts of each program at different funding levels.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
### LOAD PACKAGES ####

import pandas as pd
import numpy as np
import plotly.express as px
import plotly

### LOAD DATA ###

person_raw = pd.read_csv('https://github.com/MaxGhenis/datarepo/raw/master/pppub19.csv.gz',
                         usecols=['MARSUPWT', 'SPM_ID', 'SPM_POVTHRESHOLD',
                                  'SPM_RESOURCES', 'A_AGE'])

### PREPROCESS ###

person = person_raw.copy(deep=True)
person.columns = person.columns.str.lower()
person['weight'] = person.marsupwt/100
#Compute total children and adults in each resource sharing group.
person['child'] = person.a_age &amp;lt; 18
person['adult'] = person.a_age &amp;gt;= 18
spmu_ages = person.groupby('spm_id')[['child','adult']].sum()
spmu_ages.columns = ['children', 'total_adults']
person2 = person.merge(spmu_ages,left_on='spm_id', right_index=True)
total_children = (person2.child * person2.weight).sum()
total_adults = (person2.adult * person2.weight).sum()

### CALCULATIONS ###

child_allowance_overall = []
child_allowance_child = []
child_allowance_adults = []

# Determine the poverty rate impact of a Child Allownace from $0 in new spending to $1 trillion.

for spending in range(0, 1000000000001, 50000000000):
    child_allowance_per_child = spending/total_children
    total_child_allowance = person2.children * child_allowance_per_child
    new_spm_resources_ca = person2.spm_resources + total_child_allowance
    new_poor_ca = new_spm_resources_ca &amp;lt; person2.spm_povthreshold
    new_total_child_poor = ((person2.child * person2.weight * 
                             new_poor_ca).sum())
    new_child_poverty_rate = ((new_total_child_poor)/
                              (person2.child * person2.weight).sum())
    new_total_adult_poor = ((person2.adult * person2.weight * 
                             new_poor_ca).sum())
    new_adult_poverty_rate = ((new_total_adult_poor)/
                              (person2.adult * person2.weight).sum())
    new_total_poor_ca = (new_poor_ca * person2.weight).sum()
    new_poverty_rate_ca = new_total_poor_ca/person2.weight.sum()
    child_allowance_overall.append(new_poverty_rate_ca)
    child_allowance_child.append(new_child_poverty_rate)
    child_allowance_adults.append(new_adult_poverty_rate)
    
ubi_adults_overall = []
ubi_adults_child = []
ubi_adults_adults = []

# Determine the poverty rate impact of a Adult UBI from $0 in new spending to $1 trillion.

for spending in range(0, 1000000000001, 50000000000):
    adult_ubi = spending/total_adults
    total_adult_ubi = person2.total_adults * adult_ubi
    new_spm_resources_ubi = person2.spm_resources + total_adult_ubi
    new_poor_ubi = new_spm_resources_ubi &amp;lt; person2.spm_povthreshold
    new_total_child_poor = ((person2.child * person2.weight * 
                             new_poor_ubi).sum())
    new_child_poverty_rate = ((new_total_child_poor)/
                              (person2.child * person2.weight).sum())
    new_total_adult_poor = ((person2.adult * person2.weight * 
                             new_poor_ubi).sum())
    new_adult_poverty_rate = ((new_total_adult_poor)/
                              (person2.adult * person2.weight).sum())
    new_total_poor_ubi = (new_poor_ubi * person2.weight).sum()
    new_poverty_rate_ubi = new_total_poor_ubi/person2.weight.sum()
    ubi_adults_overall.append(new_poverty_rate_ubi)
    ubi_adults_child.append(new_child_poverty_rate)
    ubi_adults_adults.append(new_adult_poverty_rate)
    
ubi_all_overall = []
ubi_all_child = []
ubi_all_adults = []

# Determine the poverty rate impact of a All UBI from $0 in new spending to $1 trillion.

for spending in range(0, 1000000000001, 50000000000):
    all_ubi_per_person = spending/(total_adults + total_children)
    total_all_ubi = ((person2.children * all_ubi_per_person) + 
                    (person2.total_adults * all_ubi_per_person))
    new_spm_resources_all_ubi = person2.spm_resources + total_all_ubi
    new_poor_all_ubi = new_spm_resources_all_ubi &amp;lt; person2.spm_povthreshold
    new_total_child_poor = ((person2.child * person2.weight * 
                             new_poor_all_ubi).sum())
    new_child_poverty_rate = ((new_total_child_poor)/
                              (person2.child * person2.weight).sum())
    new_total_adult_poor = ((person2.adult * person2.weight * 
                             new_poor_all_ubi).sum())
    new_adult_poverty_rate = ((new_total_adult_poor)/
                              (person2.adult * person2.weight).sum())
    new_total_poor_all_ubi = (new_poor_all_ubi * person2.weight).sum()
    new_poverty_rate_all_ubi = new_total_poor_all_ubi/person2.weight.sum()
    ubi_all_overall.append(new_poverty_rate_all_ubi)
    ubi_all_child.append(new_child_poverty_rate)
    ubi_all_adults.append(new_adult_poverty_rate)
    
spending_data = []
for spending in range(0, 1001, 50):
    spending = spending/100
    spending_data.append(spending)
    
### ANALYSIS ###

# Create a DataFrame grouped by each plans impact on the overall poverty rate. 
overall = {'spending_in_billions': spending_data,
                       'child_allowance': child_allowance_overall,
                       'adult_ubi': ubi_adults_overall,
                       'all_ubi': ubi_all_overall}
                    
overall_df = pd.DataFrame(overall)
overall_df = pd.DataFrame(overall_df).round(3)

# Create a DataFrame grouped by each plans impact on the child poverty rate.
child = {'spending_in_billions': spending_data,
         'child_allowance': child_allowance_child,
         'adult_ubi': ubi_adults_child,
         'all_ubi': ubi_all_child}
                    
child_df = pd.DataFrame(child)
child_df = pd.DataFrame(child_df).round(3)


# Create a DataFrame grouped by each plans impact on the adult poverty rate.
adult = {'spending_in_billions': spending_data,
         'child_allowance': child_allowance_adults,
         'adult_ubi': ubi_adults_adults,
         'all_ubi': ubi_all_adults}
                    
adult_df = pd.DataFrame(adult)
adult_df = pd.DataFrame(adult_df).round(3)


# Join different programs together for plotly.
program = (pd.melt(overall_df, 'spending_in_billions', 
                   var_name='ubi_type',value_name='poverty_rate'))

def melt_dict(d):
  &quot;&quot;&quot; produce long version of data frame represented by dictionary (d).
  
  Arguments
  d: Dictionary where each element represents a differnt UBI type and spending levels and the poverty impacts.
  
  Returns
  DataFrame where every row is the combination of UBI type and spending level.
  &quot;&quot;&quot;
  df = pd.DataFrame(d).round(3) * 100
  program = pd.melt(df, 'spending_in_billions', var_name='ubi_type',value_name='poverty_rate')
  program['ubi_type'] = program.ubi_type.map({'child_allowance': 'Child allowance',
                                      'adult_ubi': 'Adult UBI',
                                      'all_ubi': 'All UBI'})
  return program

program_overall = melt_dict(overall)
program_child = melt_dict(child)
program_adult = melt_dict(adult)

def line_graph(df, x, y, color, title, xaxis_title, yaxis_title):
    &quot;&quot;&quot;Style for line graphs.
    
    Arguments
    df: DataFrame with data to be plotted.
    x: The string representing the column in df that holds the new spending in billions.
    y: The string representing the column in df that holds the poverty rate.
    color: The string representing the UBI type.
    xaxis_title: The string represnting the xaxis-title.
    yaxis_title: The string representing the yaxis-title.
    
    Returns
    Nothing. Shows the plot.
    &quot;&quot;&quot;
    fig = px.line(df, x=x, y=y, color=color)
    fig.update_layout(
        title=title,
        xaxis_title=xaxis_title,
        yaxis_title=yaxis_title,
        yaxis_ticksuffix='%',
        font=dict(family='Roboto'),
        hovermode='x',
        xaxis_tickprefix='$',
        xaxis_ticksuffix='B',
        plot_bgcolor='white',
        legend_title_text=''
        
    )

    fig.update_traces(mode='markers+lines', hovertemplate=None)

    return fig

fig = line_graph(df=program_overall, x='spending_in_billions', 
           y='poverty_rate', color='ubi_type',
           title='Overall poverty rate and spending on cash transfer programs',
           xaxis_title='Spending in billions',
           yaxis_title='SPM poverty rate')

fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/adult_child_ubi/2020-07-07-adult-child-ubi-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;Unsurprisingly, a Child Allowance was the most effective program at reducing child poverty at all levels of spending. Spending $400 billion on a Child Allowance cuts child poverty by over two-thirds, from 13.6 percent to 4.3 percent.&lt;/p&gt;

&lt;p&gt;Comparatively, spending $1 trillion on an Adult UBI leaves 7 percent of children still in poverty. For an All UBI and a Child Allowance under the same spending, 4 percent and 1 percent of children would remain in poverty, respectively.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = line_graph(df=program_child, x='spending_in_billions', 
           y='poverty_rate', color='ubi_type',
           title='Child poverty rate and spending on cash transfer programs',
           xaxis_title='Spending in billions',
           yaxis_title='SPM poverty rate among people aged 17 and under')
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/adult_child_ubi/2020-07-07-adult-child-ubi-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;An Adult UBI and an All UBI have nearly identical effects on the adult poverty rate. A Child Allowance has a smaller impact on adult poverty because the benefits only go to adults with children in their family.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = line_graph(df=program_adult, x='spending_in_billions', 
           y='poverty_rate', color='ubi_type',
           title='Adult poverty rate and spending on cash transfer programs',
           xaxis_title='Spending in billions',
           yaxis_title='SPM poverty rate among people aged 18 and over')
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/adult_child_ubi/2020-07-07-adult-child-ubi-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This analysis finds that (a) including children in basic income plans enhances their anti-poverty effects and (b) optimal policy depends on spending levels.&lt;/p&gt;

&lt;p&gt;Given limited political support for added spending, a Child Allowance alleviates poverty most effectively. If the political appetite for anti-poverty spending is more substantial, we should aim to provide a truly universal UBI and provide cash transfers to everyone.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Nate Golden</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      
        <category term="poverty" />
      

      
        <summary type="html">UBI relieves poverty more when it includes children.</summary>
      

      
      
    </entry>
  
</feed>
